
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Lanche
 * 
 */
export type Lanche = $Result.DefaultSelection<Prisma.$LanchePayload>
/**
 * Model Ingrediente
 * 
 */
export type Ingrediente = $Result.DefaultSelection<Prisma.$IngredientePayload>
/**
 * Model LancheIngrediente
 * 
 */
export type LancheIngrediente = $Result.DefaultSelection<Prisma.$LancheIngredientePayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Compra
 * 
 */
export type Compra = $Result.DefaultSelection<Prisma.$CompraPayload>
/**
 * Model CompraLanche
 * 
 */
export type CompraLanche = $Result.DefaultSelection<Prisma.$CompraLanchePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Lanches
 * const lanches = await prisma.lanche.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Lanches
   * const lanches = await prisma.lanche.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.lanche`: Exposes CRUD operations for the **Lanche** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lanches
    * const lanches = await prisma.lanche.findMany()
    * ```
    */
  get lanche(): Prisma.LancheDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ingrediente`: Exposes CRUD operations for the **Ingrediente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredientes
    * const ingredientes = await prisma.ingrediente.findMany()
    * ```
    */
  get ingrediente(): Prisma.IngredienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lancheIngrediente`: Exposes CRUD operations for the **LancheIngrediente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LancheIngredientes
    * const lancheIngredientes = await prisma.lancheIngrediente.findMany()
    * ```
    */
  get lancheIngrediente(): Prisma.LancheIngredienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **Compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.CompraDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.compraLanche`: Exposes CRUD operations for the **CompraLanche** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompraLanches
    * const compraLanches = await prisma.compraLanche.findMany()
    * ```
    */
  get compraLanche(): Prisma.CompraLancheDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Lanche: 'Lanche',
    Ingrediente: 'Ingrediente',
    LancheIngrediente: 'LancheIngrediente',
    Cliente: 'Cliente',
    Compra: 'Compra',
    CompraLanche: 'CompraLanche'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "lanche" | "ingrediente" | "lancheIngrediente" | "cliente" | "compra" | "compraLanche"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Lanche: {
        payload: Prisma.$LanchePayload<ExtArgs>
        fields: Prisma.LancheFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LancheFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LancheFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>
          }
          findFirst: {
            args: Prisma.LancheFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LancheFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>
          }
          findMany: {
            args: Prisma.LancheFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>[]
          }
          create: {
            args: Prisma.LancheCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>
          }
          createMany: {
            args: Prisma.LancheCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LancheCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>[]
          }
          delete: {
            args: Prisma.LancheDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>
          }
          update: {
            args: Prisma.LancheUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>
          }
          deleteMany: {
            args: Prisma.LancheDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LancheUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LancheUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>[]
          }
          upsert: {
            args: Prisma.LancheUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanchePayload>
          }
          aggregate: {
            args: Prisma.LancheAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanche>
          }
          groupBy: {
            args: Prisma.LancheGroupByArgs<ExtArgs>
            result: $Utils.Optional<LancheGroupByOutputType>[]
          }
          count: {
            args: Prisma.LancheCountArgs<ExtArgs>
            result: $Utils.Optional<LancheCountAggregateOutputType> | number
          }
        }
      }
      Ingrediente: {
        payload: Prisma.$IngredientePayload<ExtArgs>
        fields: Prisma.IngredienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>
          }
          findFirst: {
            args: Prisma.IngredienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>
          }
          findMany: {
            args: Prisma.IngredienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>[]
          }
          create: {
            args: Prisma.IngredienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>
          }
          createMany: {
            args: Prisma.IngredienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngredienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>[]
          }
          delete: {
            args: Prisma.IngredienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>
          }
          update: {
            args: Prisma.IngredienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>
          }
          deleteMany: {
            args: Prisma.IngredienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngredienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IngredienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>[]
          }
          upsert: {
            args: Prisma.IngredienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientePayload>
          }
          aggregate: {
            args: Prisma.IngredienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngrediente>
          }
          groupBy: {
            args: Prisma.IngredienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngredienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredienteCountArgs<ExtArgs>
            result: $Utils.Optional<IngredienteCountAggregateOutputType> | number
          }
        }
      }
      LancheIngrediente: {
        payload: Prisma.$LancheIngredientePayload<ExtArgs>
        fields: Prisma.LancheIngredienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LancheIngredienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LancheIngredienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>
          }
          findFirst: {
            args: Prisma.LancheIngredienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LancheIngredienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>
          }
          findMany: {
            args: Prisma.LancheIngredienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>[]
          }
          create: {
            args: Prisma.LancheIngredienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>
          }
          createMany: {
            args: Prisma.LancheIngredienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LancheIngredienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>[]
          }
          delete: {
            args: Prisma.LancheIngredienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>
          }
          update: {
            args: Prisma.LancheIngredienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>
          }
          deleteMany: {
            args: Prisma.LancheIngredienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LancheIngredienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LancheIngredienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>[]
          }
          upsert: {
            args: Prisma.LancheIngredienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LancheIngredientePayload>
          }
          aggregate: {
            args: Prisma.LancheIngredienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLancheIngrediente>
          }
          groupBy: {
            args: Prisma.LancheIngredienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LancheIngredienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LancheIngredienteCountArgs<ExtArgs>
            result: $Utils.Optional<LancheIngredienteCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Compra: {
        payload: Prisma.$CompraPayload<ExtArgs>
        fields: Prisma.CompraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          findFirst: {
            args: Prisma.CompraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          findMany: {
            args: Prisma.CompraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>[]
          }
          create: {
            args: Prisma.CompraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          createMany: {
            args: Prisma.CompraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>[]
          }
          delete: {
            args: Prisma.CompraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          update: {
            args: Prisma.CompraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          deleteMany: {
            args: Prisma.CompraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompraUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>[]
          }
          upsert: {
            args: Prisma.CompraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          aggregate: {
            args: Prisma.CompraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompra>
          }
          groupBy: {
            args: Prisma.CompraGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompraGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompraCountArgs<ExtArgs>
            result: $Utils.Optional<CompraCountAggregateOutputType> | number
          }
        }
      }
      CompraLanche: {
        payload: Prisma.$CompraLanchePayload<ExtArgs>
        fields: Prisma.CompraLancheFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompraLancheFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompraLancheFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>
          }
          findFirst: {
            args: Prisma.CompraLancheFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompraLancheFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>
          }
          findMany: {
            args: Prisma.CompraLancheFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>[]
          }
          create: {
            args: Prisma.CompraLancheCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>
          }
          createMany: {
            args: Prisma.CompraLancheCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompraLancheCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>[]
          }
          delete: {
            args: Prisma.CompraLancheDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>
          }
          update: {
            args: Prisma.CompraLancheUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>
          }
          deleteMany: {
            args: Prisma.CompraLancheDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompraLancheUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompraLancheUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>[]
          }
          upsert: {
            args: Prisma.CompraLancheUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraLanchePayload>
          }
          aggregate: {
            args: Prisma.CompraLancheAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompraLanche>
          }
          groupBy: {
            args: Prisma.CompraLancheGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompraLancheGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompraLancheCountArgs<ExtArgs>
            result: $Utils.Optional<CompraLancheCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    lanche?: LancheOmit
    ingrediente?: IngredienteOmit
    lancheIngrediente?: LancheIngredienteOmit
    cliente?: ClienteOmit
    compra?: CompraOmit
    compraLanche?: CompraLancheOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LancheCountOutputType
   */

  export type LancheCountOutputType = {
    ingredientes: number
    comprasLanches: number
  }

  export type LancheCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredientes?: boolean | LancheCountOutputTypeCountIngredientesArgs
    comprasLanches?: boolean | LancheCountOutputTypeCountComprasLanchesArgs
  }

  // Custom InputTypes
  /**
   * LancheCountOutputType without action
   */
  export type LancheCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheCountOutputType
     */
    select?: LancheCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LancheCountOutputType without action
   */
  export type LancheCountOutputTypeCountIngredientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LancheIngredienteWhereInput
  }

  /**
   * LancheCountOutputType without action
   */
  export type LancheCountOutputTypeCountComprasLanchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraLancheWhereInput
  }


  /**
   * Count Type IngredienteCountOutputType
   */

  export type IngredienteCountOutputType = {
    lanches: number
  }

  export type IngredienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lanches?: boolean | IngredienteCountOutputTypeCountLanchesArgs
  }

  // Custom InputTypes
  /**
   * IngredienteCountOutputType without action
   */
  export type IngredienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredienteCountOutputType
     */
    select?: IngredienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredienteCountOutputType without action
   */
  export type IngredienteCountOutputTypeCountLanchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LancheIngredienteWhereInput
  }


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    compras: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compras?: boolean | ClienteCountOutputTypeCountComprasArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountComprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraWhereInput
  }


  /**
   * Count Type CompraCountOutputType
   */

  export type CompraCountOutputType = {
    lanches: number
  }

  export type CompraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lanches?: boolean | CompraCountOutputTypeCountLanchesArgs
  }

  // Custom InputTypes
  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraCountOutputType
     */
    select?: CompraCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeCountLanchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraLancheWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Lanche
   */

  export type AggregateLanche = {
    _count: LancheCountAggregateOutputType | null
    _avg: LancheAvgAggregateOutputType | null
    _sum: LancheSumAggregateOutputType | null
    _min: LancheMinAggregateOutputType | null
    _max: LancheMaxAggregateOutputType | null
  }

  export type LancheAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type LancheSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type LancheMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    image: string | null
  }

  export type LancheMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    image: string | null
  }

  export type LancheCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    image: number
    _all: number
  }


  export type LancheAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type LancheSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type LancheMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    image?: true
  }

  export type LancheMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    image?: true
  }

  export type LancheCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    image?: true
    _all?: true
  }

  export type LancheAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lanche to aggregate.
     */
    where?: LancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lanches to fetch.
     */
    orderBy?: LancheOrderByWithRelationInput | LancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lanches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lanches
    **/
    _count?: true | LancheCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LancheAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LancheSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LancheMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LancheMaxAggregateInputType
  }

  export type GetLancheAggregateType<T extends LancheAggregateArgs> = {
        [P in keyof T & keyof AggregateLanche]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanche[P]>
      : GetScalarType<T[P], AggregateLanche[P]>
  }




  export type LancheGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LancheWhereInput
    orderBy?: LancheOrderByWithAggregationInput | LancheOrderByWithAggregationInput[]
    by: LancheScalarFieldEnum[] | LancheScalarFieldEnum
    having?: LancheScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LancheCountAggregateInputType | true
    _avg?: LancheAvgAggregateInputType
    _sum?: LancheSumAggregateInputType
    _min?: LancheMinAggregateInputType
    _max?: LancheMaxAggregateInputType
  }

  export type LancheGroupByOutputType = {
    id: number
    name: string
    description: string
    price: number
    image: string
    _count: LancheCountAggregateOutputType | null
    _avg: LancheAvgAggregateOutputType | null
    _sum: LancheSumAggregateOutputType | null
    _min: LancheMinAggregateOutputType | null
    _max: LancheMaxAggregateOutputType | null
  }

  type GetLancheGroupByPayload<T extends LancheGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LancheGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LancheGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LancheGroupByOutputType[P]>
            : GetScalarType<T[P], LancheGroupByOutputType[P]>
        }
      >
    >


  export type LancheSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    image?: boolean
    ingredientes?: boolean | Lanche$ingredientesArgs<ExtArgs>
    comprasLanches?: boolean | Lanche$comprasLanchesArgs<ExtArgs>
    _count?: boolean | LancheCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lanche"]>

  export type LancheSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    image?: boolean
  }, ExtArgs["result"]["lanche"]>

  export type LancheSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    image?: boolean
  }, ExtArgs["result"]["lanche"]>

  export type LancheSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    image?: boolean
  }

  export type LancheOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "price" | "image", ExtArgs["result"]["lanche"]>
  export type LancheInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredientes?: boolean | Lanche$ingredientesArgs<ExtArgs>
    comprasLanches?: boolean | Lanche$comprasLanchesArgs<ExtArgs>
    _count?: boolean | LancheCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LancheIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LancheIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LanchePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lanche"
    objects: {
      ingredientes: Prisma.$LancheIngredientePayload<ExtArgs>[]
      comprasLanches: Prisma.$CompraLanchePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      price: number
      image: string
    }, ExtArgs["result"]["lanche"]>
    composites: {}
  }

  type LancheGetPayload<S extends boolean | null | undefined | LancheDefaultArgs> = $Result.GetResult<Prisma.$LanchePayload, S>

  type LancheCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LancheFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LancheCountAggregateInputType | true
    }

  export interface LancheDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lanche'], meta: { name: 'Lanche' } }
    /**
     * Find zero or one Lanche that matches the filter.
     * @param {LancheFindUniqueArgs} args - Arguments to find a Lanche
     * @example
     * // Get one Lanche
     * const lanche = await prisma.lanche.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LancheFindUniqueArgs>(args: SelectSubset<T, LancheFindUniqueArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lanche that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LancheFindUniqueOrThrowArgs} args - Arguments to find a Lanche
     * @example
     * // Get one Lanche
     * const lanche = await prisma.lanche.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LancheFindUniqueOrThrowArgs>(args: SelectSubset<T, LancheFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lanche that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheFindFirstArgs} args - Arguments to find a Lanche
     * @example
     * // Get one Lanche
     * const lanche = await prisma.lanche.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LancheFindFirstArgs>(args?: SelectSubset<T, LancheFindFirstArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lanche that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheFindFirstOrThrowArgs} args - Arguments to find a Lanche
     * @example
     * // Get one Lanche
     * const lanche = await prisma.lanche.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LancheFindFirstOrThrowArgs>(args?: SelectSubset<T, LancheFindFirstOrThrowArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lanches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lanches
     * const lanches = await prisma.lanche.findMany()
     * 
     * // Get first 10 Lanches
     * const lanches = await prisma.lanche.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lancheWithIdOnly = await prisma.lanche.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LancheFindManyArgs>(args?: SelectSubset<T, LancheFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lanche.
     * @param {LancheCreateArgs} args - Arguments to create a Lanche.
     * @example
     * // Create one Lanche
     * const Lanche = await prisma.lanche.create({
     *   data: {
     *     // ... data to create a Lanche
     *   }
     * })
     * 
     */
    create<T extends LancheCreateArgs>(args: SelectSubset<T, LancheCreateArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lanches.
     * @param {LancheCreateManyArgs} args - Arguments to create many Lanches.
     * @example
     * // Create many Lanches
     * const lanche = await prisma.lanche.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LancheCreateManyArgs>(args?: SelectSubset<T, LancheCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lanches and returns the data saved in the database.
     * @param {LancheCreateManyAndReturnArgs} args - Arguments to create many Lanches.
     * @example
     * // Create many Lanches
     * const lanche = await prisma.lanche.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lanches and only return the `id`
     * const lancheWithIdOnly = await prisma.lanche.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LancheCreateManyAndReturnArgs>(args?: SelectSubset<T, LancheCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lanche.
     * @param {LancheDeleteArgs} args - Arguments to delete one Lanche.
     * @example
     * // Delete one Lanche
     * const Lanche = await prisma.lanche.delete({
     *   where: {
     *     // ... filter to delete one Lanche
     *   }
     * })
     * 
     */
    delete<T extends LancheDeleteArgs>(args: SelectSubset<T, LancheDeleteArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lanche.
     * @param {LancheUpdateArgs} args - Arguments to update one Lanche.
     * @example
     * // Update one Lanche
     * const lanche = await prisma.lanche.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LancheUpdateArgs>(args: SelectSubset<T, LancheUpdateArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lanches.
     * @param {LancheDeleteManyArgs} args - Arguments to filter Lanches to delete.
     * @example
     * // Delete a few Lanches
     * const { count } = await prisma.lanche.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LancheDeleteManyArgs>(args?: SelectSubset<T, LancheDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lanches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lanches
     * const lanche = await prisma.lanche.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LancheUpdateManyArgs>(args: SelectSubset<T, LancheUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lanches and returns the data updated in the database.
     * @param {LancheUpdateManyAndReturnArgs} args - Arguments to update many Lanches.
     * @example
     * // Update many Lanches
     * const lanche = await prisma.lanche.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lanches and only return the `id`
     * const lancheWithIdOnly = await prisma.lanche.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LancheUpdateManyAndReturnArgs>(args: SelectSubset<T, LancheUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lanche.
     * @param {LancheUpsertArgs} args - Arguments to update or create a Lanche.
     * @example
     * // Update or create a Lanche
     * const lanche = await prisma.lanche.upsert({
     *   create: {
     *     // ... data to create a Lanche
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lanche we want to update
     *   }
     * })
     */
    upsert<T extends LancheUpsertArgs>(args: SelectSubset<T, LancheUpsertArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lanches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheCountArgs} args - Arguments to filter Lanches to count.
     * @example
     * // Count the number of Lanches
     * const count = await prisma.lanche.count({
     *   where: {
     *     // ... the filter for the Lanches we want to count
     *   }
     * })
    **/
    count<T extends LancheCountArgs>(
      args?: Subset<T, LancheCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LancheCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lanche.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LancheAggregateArgs>(args: Subset<T, LancheAggregateArgs>): Prisma.PrismaPromise<GetLancheAggregateType<T>>

    /**
     * Group by Lanche.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LancheGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LancheGroupByArgs['orderBy'] }
        : { orderBy?: LancheGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LancheGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLancheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lanche model
   */
  readonly fields: LancheFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lanche.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LancheClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ingredientes<T extends Lanche$ingredientesArgs<ExtArgs> = {}>(args?: Subset<T, Lanche$ingredientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comprasLanches<T extends Lanche$comprasLanchesArgs<ExtArgs> = {}>(args?: Subset<T, Lanche$comprasLanchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lanche model
   */
  interface LancheFieldRefs {
    readonly id: FieldRef<"Lanche", 'Int'>
    readonly name: FieldRef<"Lanche", 'String'>
    readonly description: FieldRef<"Lanche", 'String'>
    readonly price: FieldRef<"Lanche", 'Float'>
    readonly image: FieldRef<"Lanche", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lanche findUnique
   */
  export type LancheFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * Filter, which Lanche to fetch.
     */
    where: LancheWhereUniqueInput
  }

  /**
   * Lanche findUniqueOrThrow
   */
  export type LancheFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * Filter, which Lanche to fetch.
     */
    where: LancheWhereUniqueInput
  }

  /**
   * Lanche findFirst
   */
  export type LancheFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * Filter, which Lanche to fetch.
     */
    where?: LancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lanches to fetch.
     */
    orderBy?: LancheOrderByWithRelationInput | LancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lanches.
     */
    cursor?: LancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lanches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lanches.
     */
    distinct?: LancheScalarFieldEnum | LancheScalarFieldEnum[]
  }

  /**
   * Lanche findFirstOrThrow
   */
  export type LancheFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * Filter, which Lanche to fetch.
     */
    where?: LancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lanches to fetch.
     */
    orderBy?: LancheOrderByWithRelationInput | LancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lanches.
     */
    cursor?: LancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lanches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lanches.
     */
    distinct?: LancheScalarFieldEnum | LancheScalarFieldEnum[]
  }

  /**
   * Lanche findMany
   */
  export type LancheFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * Filter, which Lanches to fetch.
     */
    where?: LancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lanches to fetch.
     */
    orderBy?: LancheOrderByWithRelationInput | LancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lanches.
     */
    cursor?: LancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lanches.
     */
    skip?: number
    distinct?: LancheScalarFieldEnum | LancheScalarFieldEnum[]
  }

  /**
   * Lanche create
   */
  export type LancheCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * The data needed to create a Lanche.
     */
    data: XOR<LancheCreateInput, LancheUncheckedCreateInput>
  }

  /**
   * Lanche createMany
   */
  export type LancheCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lanches.
     */
    data: LancheCreateManyInput | LancheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lanche createManyAndReturn
   */
  export type LancheCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * The data used to create many Lanches.
     */
    data: LancheCreateManyInput | LancheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lanche update
   */
  export type LancheUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * The data needed to update a Lanche.
     */
    data: XOR<LancheUpdateInput, LancheUncheckedUpdateInput>
    /**
     * Choose, which Lanche to update.
     */
    where: LancheWhereUniqueInput
  }

  /**
   * Lanche updateMany
   */
  export type LancheUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lanches.
     */
    data: XOR<LancheUpdateManyMutationInput, LancheUncheckedUpdateManyInput>
    /**
     * Filter which Lanches to update
     */
    where?: LancheWhereInput
    /**
     * Limit how many Lanches to update.
     */
    limit?: number
  }

  /**
   * Lanche updateManyAndReturn
   */
  export type LancheUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * The data used to update Lanches.
     */
    data: XOR<LancheUpdateManyMutationInput, LancheUncheckedUpdateManyInput>
    /**
     * Filter which Lanches to update
     */
    where?: LancheWhereInput
    /**
     * Limit how many Lanches to update.
     */
    limit?: number
  }

  /**
   * Lanche upsert
   */
  export type LancheUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * The filter to search for the Lanche to update in case it exists.
     */
    where: LancheWhereUniqueInput
    /**
     * In case the Lanche found by the `where` argument doesn't exist, create a new Lanche with this data.
     */
    create: XOR<LancheCreateInput, LancheUncheckedCreateInput>
    /**
     * In case the Lanche was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LancheUpdateInput, LancheUncheckedUpdateInput>
  }

  /**
   * Lanche delete
   */
  export type LancheDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
    /**
     * Filter which Lanche to delete.
     */
    where: LancheWhereUniqueInput
  }

  /**
   * Lanche deleteMany
   */
  export type LancheDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lanches to delete
     */
    where?: LancheWhereInput
    /**
     * Limit how many Lanches to delete.
     */
    limit?: number
  }

  /**
   * Lanche.ingredientes
   */
  export type Lanche$ingredientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    where?: LancheIngredienteWhereInput
    orderBy?: LancheIngredienteOrderByWithRelationInput | LancheIngredienteOrderByWithRelationInput[]
    cursor?: LancheIngredienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LancheIngredienteScalarFieldEnum | LancheIngredienteScalarFieldEnum[]
  }

  /**
   * Lanche.comprasLanches
   */
  export type Lanche$comprasLanchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    where?: CompraLancheWhereInput
    orderBy?: CompraLancheOrderByWithRelationInput | CompraLancheOrderByWithRelationInput[]
    cursor?: CompraLancheWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompraLancheScalarFieldEnum | CompraLancheScalarFieldEnum[]
  }

  /**
   * Lanche without action
   */
  export type LancheDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lanche
     */
    select?: LancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lanche
     */
    omit?: LancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheInclude<ExtArgs> | null
  }


  /**
   * Model Ingrediente
   */

  export type AggregateIngrediente = {
    _count: IngredienteCountAggregateOutputType | null
    _avg: IngredienteAvgAggregateOutputType | null
    _sum: IngredienteSumAggregateOutputType | null
    _min: IngredienteMinAggregateOutputType | null
    _max: IngredienteMaxAggregateOutputType | null
  }

  export type IngredienteAvgAggregateOutputType = {
    id: number | null
  }

  export type IngredienteSumAggregateOutputType = {
    id: number | null
  }

  export type IngredienteMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type IngredienteMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type IngredienteCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type IngredienteAvgAggregateInputType = {
    id?: true
  }

  export type IngredienteSumAggregateInputType = {
    id?: true
  }

  export type IngredienteMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type IngredienteMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type IngredienteCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type IngredienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingrediente to aggregate.
     */
    where?: IngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredientes to fetch.
     */
    orderBy?: IngredienteOrderByWithRelationInput | IngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredientes
    **/
    _count?: true | IngredienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredienteMaxAggregateInputType
  }

  export type GetIngredienteAggregateType<T extends IngredienteAggregateArgs> = {
        [P in keyof T & keyof AggregateIngrediente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngrediente[P]>
      : GetScalarType<T[P], AggregateIngrediente[P]>
  }




  export type IngredienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredienteWhereInput
    orderBy?: IngredienteOrderByWithAggregationInput | IngredienteOrderByWithAggregationInput[]
    by: IngredienteScalarFieldEnum[] | IngredienteScalarFieldEnum
    having?: IngredienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredienteCountAggregateInputType | true
    _avg?: IngredienteAvgAggregateInputType
    _sum?: IngredienteSumAggregateInputType
    _min?: IngredienteMinAggregateInputType
    _max?: IngredienteMaxAggregateInputType
  }

  export type IngredienteGroupByOutputType = {
    id: number
    name: string
    _count: IngredienteCountAggregateOutputType | null
    _avg: IngredienteAvgAggregateOutputType | null
    _sum: IngredienteSumAggregateOutputType | null
    _min: IngredienteMinAggregateOutputType | null
    _max: IngredienteMaxAggregateOutputType | null
  }

  type GetIngredienteGroupByPayload<T extends IngredienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredienteGroupByOutputType[P]>
            : GetScalarType<T[P], IngredienteGroupByOutputType[P]>
        }
      >
    >


  export type IngredienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lanches?: boolean | Ingrediente$lanchesArgs<ExtArgs>
    _count?: boolean | IngredienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingrediente"]>

  export type IngredienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["ingrediente"]>

  export type IngredienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["ingrediente"]>

  export type IngredienteSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type IngredienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["ingrediente"]>
  export type IngredienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lanches?: boolean | Ingrediente$lanchesArgs<ExtArgs>
    _count?: boolean | IngredienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IngredienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type IngredienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IngredientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingrediente"
    objects: {
      lanches: Prisma.$LancheIngredientePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["ingrediente"]>
    composites: {}
  }

  type IngredienteGetPayload<S extends boolean | null | undefined | IngredienteDefaultArgs> = $Result.GetResult<Prisma.$IngredientePayload, S>

  type IngredienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IngredienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IngredienteCountAggregateInputType | true
    }

  export interface IngredienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingrediente'], meta: { name: 'Ingrediente' } }
    /**
     * Find zero or one Ingrediente that matches the filter.
     * @param {IngredienteFindUniqueArgs} args - Arguments to find a Ingrediente
     * @example
     * // Get one Ingrediente
     * const ingrediente = await prisma.ingrediente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngredienteFindUniqueArgs>(args: SelectSubset<T, IngredienteFindUniqueArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ingrediente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IngredienteFindUniqueOrThrowArgs} args - Arguments to find a Ingrediente
     * @example
     * // Get one Ingrediente
     * const ingrediente = await prisma.ingrediente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngredienteFindUniqueOrThrowArgs>(args: SelectSubset<T, IngredienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ingrediente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteFindFirstArgs} args - Arguments to find a Ingrediente
     * @example
     * // Get one Ingrediente
     * const ingrediente = await prisma.ingrediente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngredienteFindFirstArgs>(args?: SelectSubset<T, IngredienteFindFirstArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ingrediente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteFindFirstOrThrowArgs} args - Arguments to find a Ingrediente
     * @example
     * // Get one Ingrediente
     * const ingrediente = await prisma.ingrediente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngredienteFindFirstOrThrowArgs>(args?: SelectSubset<T, IngredienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ingredientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredientes
     * const ingredientes = await prisma.ingrediente.findMany()
     * 
     * // Get first 10 Ingredientes
     * const ingredientes = await prisma.ingrediente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredienteWithIdOnly = await prisma.ingrediente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngredienteFindManyArgs>(args?: SelectSubset<T, IngredienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ingrediente.
     * @param {IngredienteCreateArgs} args - Arguments to create a Ingrediente.
     * @example
     * // Create one Ingrediente
     * const Ingrediente = await prisma.ingrediente.create({
     *   data: {
     *     // ... data to create a Ingrediente
     *   }
     * })
     * 
     */
    create<T extends IngredienteCreateArgs>(args: SelectSubset<T, IngredienteCreateArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ingredientes.
     * @param {IngredienteCreateManyArgs} args - Arguments to create many Ingredientes.
     * @example
     * // Create many Ingredientes
     * const ingrediente = await prisma.ingrediente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngredienteCreateManyArgs>(args?: SelectSubset<T, IngredienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ingredientes and returns the data saved in the database.
     * @param {IngredienteCreateManyAndReturnArgs} args - Arguments to create many Ingredientes.
     * @example
     * // Create many Ingredientes
     * const ingrediente = await prisma.ingrediente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ingredientes and only return the `id`
     * const ingredienteWithIdOnly = await prisma.ingrediente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngredienteCreateManyAndReturnArgs>(args?: SelectSubset<T, IngredienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ingrediente.
     * @param {IngredienteDeleteArgs} args - Arguments to delete one Ingrediente.
     * @example
     * // Delete one Ingrediente
     * const Ingrediente = await prisma.ingrediente.delete({
     *   where: {
     *     // ... filter to delete one Ingrediente
     *   }
     * })
     * 
     */
    delete<T extends IngredienteDeleteArgs>(args: SelectSubset<T, IngredienteDeleteArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ingrediente.
     * @param {IngredienteUpdateArgs} args - Arguments to update one Ingrediente.
     * @example
     * // Update one Ingrediente
     * const ingrediente = await prisma.ingrediente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngredienteUpdateArgs>(args: SelectSubset<T, IngredienteUpdateArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ingredientes.
     * @param {IngredienteDeleteManyArgs} args - Arguments to filter Ingredientes to delete.
     * @example
     * // Delete a few Ingredientes
     * const { count } = await prisma.ingrediente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngredienteDeleteManyArgs>(args?: SelectSubset<T, IngredienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredientes
     * const ingrediente = await prisma.ingrediente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngredienteUpdateManyArgs>(args: SelectSubset<T, IngredienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredientes and returns the data updated in the database.
     * @param {IngredienteUpdateManyAndReturnArgs} args - Arguments to update many Ingredientes.
     * @example
     * // Update many Ingredientes
     * const ingrediente = await prisma.ingrediente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ingredientes and only return the `id`
     * const ingredienteWithIdOnly = await prisma.ingrediente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IngredienteUpdateManyAndReturnArgs>(args: SelectSubset<T, IngredienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ingrediente.
     * @param {IngredienteUpsertArgs} args - Arguments to update or create a Ingrediente.
     * @example
     * // Update or create a Ingrediente
     * const ingrediente = await prisma.ingrediente.upsert({
     *   create: {
     *     // ... data to create a Ingrediente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingrediente we want to update
     *   }
     * })
     */
    upsert<T extends IngredienteUpsertArgs>(args: SelectSubset<T, IngredienteUpsertArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ingredientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteCountArgs} args - Arguments to filter Ingredientes to count.
     * @example
     * // Count the number of Ingredientes
     * const count = await prisma.ingrediente.count({
     *   where: {
     *     // ... the filter for the Ingredientes we want to count
     *   }
     * })
    **/
    count<T extends IngredienteCountArgs>(
      args?: Subset<T, IngredienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingrediente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredienteAggregateArgs>(args: Subset<T, IngredienteAggregateArgs>): Prisma.PrismaPromise<GetIngredienteAggregateType<T>>

    /**
     * Group by Ingrediente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredienteGroupByArgs['orderBy'] }
        : { orderBy?: IngredienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingrediente model
   */
  readonly fields: IngredienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingrediente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lanches<T extends Ingrediente$lanchesArgs<ExtArgs> = {}>(args?: Subset<T, Ingrediente$lanchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ingrediente model
   */
  interface IngredienteFieldRefs {
    readonly id: FieldRef<"Ingrediente", 'Int'>
    readonly name: FieldRef<"Ingrediente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ingrediente findUnique
   */
  export type IngredienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * Filter, which Ingrediente to fetch.
     */
    where: IngredienteWhereUniqueInput
  }

  /**
   * Ingrediente findUniqueOrThrow
   */
  export type IngredienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * Filter, which Ingrediente to fetch.
     */
    where: IngredienteWhereUniqueInput
  }

  /**
   * Ingrediente findFirst
   */
  export type IngredienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * Filter, which Ingrediente to fetch.
     */
    where?: IngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredientes to fetch.
     */
    orderBy?: IngredienteOrderByWithRelationInput | IngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredientes.
     */
    cursor?: IngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredientes.
     */
    distinct?: IngredienteScalarFieldEnum | IngredienteScalarFieldEnum[]
  }

  /**
   * Ingrediente findFirstOrThrow
   */
  export type IngredienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * Filter, which Ingrediente to fetch.
     */
    where?: IngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredientes to fetch.
     */
    orderBy?: IngredienteOrderByWithRelationInput | IngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredientes.
     */
    cursor?: IngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredientes.
     */
    distinct?: IngredienteScalarFieldEnum | IngredienteScalarFieldEnum[]
  }

  /**
   * Ingrediente findMany
   */
  export type IngredienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * Filter, which Ingredientes to fetch.
     */
    where?: IngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredientes to fetch.
     */
    orderBy?: IngredienteOrderByWithRelationInput | IngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredientes.
     */
    cursor?: IngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredientes.
     */
    skip?: number
    distinct?: IngredienteScalarFieldEnum | IngredienteScalarFieldEnum[]
  }

  /**
   * Ingrediente create
   */
  export type IngredienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingrediente.
     */
    data: XOR<IngredienteCreateInput, IngredienteUncheckedCreateInput>
  }

  /**
   * Ingrediente createMany
   */
  export type IngredienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredientes.
     */
    data: IngredienteCreateManyInput | IngredienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingrediente createManyAndReturn
   */
  export type IngredienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * The data used to create many Ingredientes.
     */
    data: IngredienteCreateManyInput | IngredienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingrediente update
   */
  export type IngredienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingrediente.
     */
    data: XOR<IngredienteUpdateInput, IngredienteUncheckedUpdateInput>
    /**
     * Choose, which Ingrediente to update.
     */
    where: IngredienteWhereUniqueInput
  }

  /**
   * Ingrediente updateMany
   */
  export type IngredienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredientes.
     */
    data: XOR<IngredienteUpdateManyMutationInput, IngredienteUncheckedUpdateManyInput>
    /**
     * Filter which Ingredientes to update
     */
    where?: IngredienteWhereInput
    /**
     * Limit how many Ingredientes to update.
     */
    limit?: number
  }

  /**
   * Ingrediente updateManyAndReturn
   */
  export type IngredienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * The data used to update Ingredientes.
     */
    data: XOR<IngredienteUpdateManyMutationInput, IngredienteUncheckedUpdateManyInput>
    /**
     * Filter which Ingredientes to update
     */
    where?: IngredienteWhereInput
    /**
     * Limit how many Ingredientes to update.
     */
    limit?: number
  }

  /**
   * Ingrediente upsert
   */
  export type IngredienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingrediente to update in case it exists.
     */
    where: IngredienteWhereUniqueInput
    /**
     * In case the Ingrediente found by the `where` argument doesn't exist, create a new Ingrediente with this data.
     */
    create: XOR<IngredienteCreateInput, IngredienteUncheckedCreateInput>
    /**
     * In case the Ingrediente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredienteUpdateInput, IngredienteUncheckedUpdateInput>
  }

  /**
   * Ingrediente delete
   */
  export type IngredienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
    /**
     * Filter which Ingrediente to delete.
     */
    where: IngredienteWhereUniqueInput
  }

  /**
   * Ingrediente deleteMany
   */
  export type IngredienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredientes to delete
     */
    where?: IngredienteWhereInput
    /**
     * Limit how many Ingredientes to delete.
     */
    limit?: number
  }

  /**
   * Ingrediente.lanches
   */
  export type Ingrediente$lanchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    where?: LancheIngredienteWhereInput
    orderBy?: LancheIngredienteOrderByWithRelationInput | LancheIngredienteOrderByWithRelationInput[]
    cursor?: LancheIngredienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LancheIngredienteScalarFieldEnum | LancheIngredienteScalarFieldEnum[]
  }

  /**
   * Ingrediente without action
   */
  export type IngredienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingrediente
     */
    select?: IngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingrediente
     */
    omit?: IngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredienteInclude<ExtArgs> | null
  }


  /**
   * Model LancheIngrediente
   */

  export type AggregateLancheIngrediente = {
    _count: LancheIngredienteCountAggregateOutputType | null
    _avg: LancheIngredienteAvgAggregateOutputType | null
    _sum: LancheIngredienteSumAggregateOutputType | null
    _min: LancheIngredienteMinAggregateOutputType | null
    _max: LancheIngredienteMaxAggregateOutputType | null
  }

  export type LancheIngredienteAvgAggregateOutputType = {
    lanche_id: number | null
    ingrediente_id: number | null
  }

  export type LancheIngredienteSumAggregateOutputType = {
    lanche_id: number | null
    ingrediente_id: number | null
  }

  export type LancheIngredienteMinAggregateOutputType = {
    lanche_id: number | null
    ingrediente_id: number | null
  }

  export type LancheIngredienteMaxAggregateOutputType = {
    lanche_id: number | null
    ingrediente_id: number | null
  }

  export type LancheIngredienteCountAggregateOutputType = {
    lanche_id: number
    ingrediente_id: number
    _all: number
  }


  export type LancheIngredienteAvgAggregateInputType = {
    lanche_id?: true
    ingrediente_id?: true
  }

  export type LancheIngredienteSumAggregateInputType = {
    lanche_id?: true
    ingrediente_id?: true
  }

  export type LancheIngredienteMinAggregateInputType = {
    lanche_id?: true
    ingrediente_id?: true
  }

  export type LancheIngredienteMaxAggregateInputType = {
    lanche_id?: true
    ingrediente_id?: true
  }

  export type LancheIngredienteCountAggregateInputType = {
    lanche_id?: true
    ingrediente_id?: true
    _all?: true
  }

  export type LancheIngredienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LancheIngrediente to aggregate.
     */
    where?: LancheIngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LancheIngredientes to fetch.
     */
    orderBy?: LancheIngredienteOrderByWithRelationInput | LancheIngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LancheIngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LancheIngredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LancheIngredientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LancheIngredientes
    **/
    _count?: true | LancheIngredienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LancheIngredienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LancheIngredienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LancheIngredienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LancheIngredienteMaxAggregateInputType
  }

  export type GetLancheIngredienteAggregateType<T extends LancheIngredienteAggregateArgs> = {
        [P in keyof T & keyof AggregateLancheIngrediente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLancheIngrediente[P]>
      : GetScalarType<T[P], AggregateLancheIngrediente[P]>
  }




  export type LancheIngredienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LancheIngredienteWhereInput
    orderBy?: LancheIngredienteOrderByWithAggregationInput | LancheIngredienteOrderByWithAggregationInput[]
    by: LancheIngredienteScalarFieldEnum[] | LancheIngredienteScalarFieldEnum
    having?: LancheIngredienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LancheIngredienteCountAggregateInputType | true
    _avg?: LancheIngredienteAvgAggregateInputType
    _sum?: LancheIngredienteSumAggregateInputType
    _min?: LancheIngredienteMinAggregateInputType
    _max?: LancheIngredienteMaxAggregateInputType
  }

  export type LancheIngredienteGroupByOutputType = {
    lanche_id: number
    ingrediente_id: number
    _count: LancheIngredienteCountAggregateOutputType | null
    _avg: LancheIngredienteAvgAggregateOutputType | null
    _sum: LancheIngredienteSumAggregateOutputType | null
    _min: LancheIngredienteMinAggregateOutputType | null
    _max: LancheIngredienteMaxAggregateOutputType | null
  }

  type GetLancheIngredienteGroupByPayload<T extends LancheIngredienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LancheIngredienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LancheIngredienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LancheIngredienteGroupByOutputType[P]>
            : GetScalarType<T[P], LancheIngredienteGroupByOutputType[P]>
        }
      >
    >


  export type LancheIngredienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lanche_id?: boolean
    ingrediente_id?: boolean
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
    ingrediente?: boolean | IngredienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lancheIngrediente"]>

  export type LancheIngredienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lanche_id?: boolean
    ingrediente_id?: boolean
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
    ingrediente?: boolean | IngredienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lancheIngrediente"]>

  export type LancheIngredienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lanche_id?: boolean
    ingrediente_id?: boolean
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
    ingrediente?: boolean | IngredienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lancheIngrediente"]>

  export type LancheIngredienteSelectScalar = {
    lanche_id?: boolean
    ingrediente_id?: boolean
  }

  export type LancheIngredienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"lanche_id" | "ingrediente_id", ExtArgs["result"]["lancheIngrediente"]>
  export type LancheIngredienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
    ingrediente?: boolean | IngredienteDefaultArgs<ExtArgs>
  }
  export type LancheIngredienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
    ingrediente?: boolean | IngredienteDefaultArgs<ExtArgs>
  }
  export type LancheIngredienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
    ingrediente?: boolean | IngredienteDefaultArgs<ExtArgs>
  }

  export type $LancheIngredientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LancheIngrediente"
    objects: {
      lanche: Prisma.$LanchePayload<ExtArgs>
      ingrediente: Prisma.$IngredientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      lanche_id: number
      ingrediente_id: number
    }, ExtArgs["result"]["lancheIngrediente"]>
    composites: {}
  }

  type LancheIngredienteGetPayload<S extends boolean | null | undefined | LancheIngredienteDefaultArgs> = $Result.GetResult<Prisma.$LancheIngredientePayload, S>

  type LancheIngredienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LancheIngredienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LancheIngredienteCountAggregateInputType | true
    }

  export interface LancheIngredienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LancheIngrediente'], meta: { name: 'LancheIngrediente' } }
    /**
     * Find zero or one LancheIngrediente that matches the filter.
     * @param {LancheIngredienteFindUniqueArgs} args - Arguments to find a LancheIngrediente
     * @example
     * // Get one LancheIngrediente
     * const lancheIngrediente = await prisma.lancheIngrediente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LancheIngredienteFindUniqueArgs>(args: SelectSubset<T, LancheIngredienteFindUniqueArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LancheIngrediente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LancheIngredienteFindUniqueOrThrowArgs} args - Arguments to find a LancheIngrediente
     * @example
     * // Get one LancheIngrediente
     * const lancheIngrediente = await prisma.lancheIngrediente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LancheIngredienteFindUniqueOrThrowArgs>(args: SelectSubset<T, LancheIngredienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LancheIngrediente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteFindFirstArgs} args - Arguments to find a LancheIngrediente
     * @example
     * // Get one LancheIngrediente
     * const lancheIngrediente = await prisma.lancheIngrediente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LancheIngredienteFindFirstArgs>(args?: SelectSubset<T, LancheIngredienteFindFirstArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LancheIngrediente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteFindFirstOrThrowArgs} args - Arguments to find a LancheIngrediente
     * @example
     * // Get one LancheIngrediente
     * const lancheIngrediente = await prisma.lancheIngrediente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LancheIngredienteFindFirstOrThrowArgs>(args?: SelectSubset<T, LancheIngredienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LancheIngredientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LancheIngredientes
     * const lancheIngredientes = await prisma.lancheIngrediente.findMany()
     * 
     * // Get first 10 LancheIngredientes
     * const lancheIngredientes = await prisma.lancheIngrediente.findMany({ take: 10 })
     * 
     * // Only select the `lanche_id`
     * const lancheIngredienteWithLanche_idOnly = await prisma.lancheIngrediente.findMany({ select: { lanche_id: true } })
     * 
     */
    findMany<T extends LancheIngredienteFindManyArgs>(args?: SelectSubset<T, LancheIngredienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LancheIngrediente.
     * @param {LancheIngredienteCreateArgs} args - Arguments to create a LancheIngrediente.
     * @example
     * // Create one LancheIngrediente
     * const LancheIngrediente = await prisma.lancheIngrediente.create({
     *   data: {
     *     // ... data to create a LancheIngrediente
     *   }
     * })
     * 
     */
    create<T extends LancheIngredienteCreateArgs>(args: SelectSubset<T, LancheIngredienteCreateArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LancheIngredientes.
     * @param {LancheIngredienteCreateManyArgs} args - Arguments to create many LancheIngredientes.
     * @example
     * // Create many LancheIngredientes
     * const lancheIngrediente = await prisma.lancheIngrediente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LancheIngredienteCreateManyArgs>(args?: SelectSubset<T, LancheIngredienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LancheIngredientes and returns the data saved in the database.
     * @param {LancheIngredienteCreateManyAndReturnArgs} args - Arguments to create many LancheIngredientes.
     * @example
     * // Create many LancheIngredientes
     * const lancheIngrediente = await prisma.lancheIngrediente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LancheIngredientes and only return the `lanche_id`
     * const lancheIngredienteWithLanche_idOnly = await prisma.lancheIngrediente.createManyAndReturn({
     *   select: { lanche_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LancheIngredienteCreateManyAndReturnArgs>(args?: SelectSubset<T, LancheIngredienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LancheIngrediente.
     * @param {LancheIngredienteDeleteArgs} args - Arguments to delete one LancheIngrediente.
     * @example
     * // Delete one LancheIngrediente
     * const LancheIngrediente = await prisma.lancheIngrediente.delete({
     *   where: {
     *     // ... filter to delete one LancheIngrediente
     *   }
     * })
     * 
     */
    delete<T extends LancheIngredienteDeleteArgs>(args: SelectSubset<T, LancheIngredienteDeleteArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LancheIngrediente.
     * @param {LancheIngredienteUpdateArgs} args - Arguments to update one LancheIngrediente.
     * @example
     * // Update one LancheIngrediente
     * const lancheIngrediente = await prisma.lancheIngrediente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LancheIngredienteUpdateArgs>(args: SelectSubset<T, LancheIngredienteUpdateArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LancheIngredientes.
     * @param {LancheIngredienteDeleteManyArgs} args - Arguments to filter LancheIngredientes to delete.
     * @example
     * // Delete a few LancheIngredientes
     * const { count } = await prisma.lancheIngrediente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LancheIngredienteDeleteManyArgs>(args?: SelectSubset<T, LancheIngredienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LancheIngredientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LancheIngredientes
     * const lancheIngrediente = await prisma.lancheIngrediente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LancheIngredienteUpdateManyArgs>(args: SelectSubset<T, LancheIngredienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LancheIngredientes and returns the data updated in the database.
     * @param {LancheIngredienteUpdateManyAndReturnArgs} args - Arguments to update many LancheIngredientes.
     * @example
     * // Update many LancheIngredientes
     * const lancheIngrediente = await prisma.lancheIngrediente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LancheIngredientes and only return the `lanche_id`
     * const lancheIngredienteWithLanche_idOnly = await prisma.lancheIngrediente.updateManyAndReturn({
     *   select: { lanche_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LancheIngredienteUpdateManyAndReturnArgs>(args: SelectSubset<T, LancheIngredienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LancheIngrediente.
     * @param {LancheIngredienteUpsertArgs} args - Arguments to update or create a LancheIngrediente.
     * @example
     * // Update or create a LancheIngrediente
     * const lancheIngrediente = await prisma.lancheIngrediente.upsert({
     *   create: {
     *     // ... data to create a LancheIngrediente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LancheIngrediente we want to update
     *   }
     * })
     */
    upsert<T extends LancheIngredienteUpsertArgs>(args: SelectSubset<T, LancheIngredienteUpsertArgs<ExtArgs>>): Prisma__LancheIngredienteClient<$Result.GetResult<Prisma.$LancheIngredientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LancheIngredientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteCountArgs} args - Arguments to filter LancheIngredientes to count.
     * @example
     * // Count the number of LancheIngredientes
     * const count = await prisma.lancheIngrediente.count({
     *   where: {
     *     // ... the filter for the LancheIngredientes we want to count
     *   }
     * })
    **/
    count<T extends LancheIngredienteCountArgs>(
      args?: Subset<T, LancheIngredienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LancheIngredienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LancheIngrediente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LancheIngredienteAggregateArgs>(args: Subset<T, LancheIngredienteAggregateArgs>): Prisma.PrismaPromise<GetLancheIngredienteAggregateType<T>>

    /**
     * Group by LancheIngrediente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LancheIngredienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LancheIngredienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LancheIngredienteGroupByArgs['orderBy'] }
        : { orderBy?: LancheIngredienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LancheIngredienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLancheIngredienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LancheIngrediente model
   */
  readonly fields: LancheIngredienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LancheIngrediente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LancheIngredienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lanche<T extends LancheDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LancheDefaultArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ingrediente<T extends IngredienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IngredienteDefaultArgs<ExtArgs>>): Prisma__IngredienteClient<$Result.GetResult<Prisma.$IngredientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LancheIngrediente model
   */
  interface LancheIngredienteFieldRefs {
    readonly lanche_id: FieldRef<"LancheIngrediente", 'Int'>
    readonly ingrediente_id: FieldRef<"LancheIngrediente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LancheIngrediente findUnique
   */
  export type LancheIngredienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * Filter, which LancheIngrediente to fetch.
     */
    where: LancheIngredienteWhereUniqueInput
  }

  /**
   * LancheIngrediente findUniqueOrThrow
   */
  export type LancheIngredienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * Filter, which LancheIngrediente to fetch.
     */
    where: LancheIngredienteWhereUniqueInput
  }

  /**
   * LancheIngrediente findFirst
   */
  export type LancheIngredienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * Filter, which LancheIngrediente to fetch.
     */
    where?: LancheIngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LancheIngredientes to fetch.
     */
    orderBy?: LancheIngredienteOrderByWithRelationInput | LancheIngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LancheIngredientes.
     */
    cursor?: LancheIngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LancheIngredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LancheIngredientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LancheIngredientes.
     */
    distinct?: LancheIngredienteScalarFieldEnum | LancheIngredienteScalarFieldEnum[]
  }

  /**
   * LancheIngrediente findFirstOrThrow
   */
  export type LancheIngredienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * Filter, which LancheIngrediente to fetch.
     */
    where?: LancheIngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LancheIngredientes to fetch.
     */
    orderBy?: LancheIngredienteOrderByWithRelationInput | LancheIngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LancheIngredientes.
     */
    cursor?: LancheIngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LancheIngredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LancheIngredientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LancheIngredientes.
     */
    distinct?: LancheIngredienteScalarFieldEnum | LancheIngredienteScalarFieldEnum[]
  }

  /**
   * LancheIngrediente findMany
   */
  export type LancheIngredienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * Filter, which LancheIngredientes to fetch.
     */
    where?: LancheIngredienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LancheIngredientes to fetch.
     */
    orderBy?: LancheIngredienteOrderByWithRelationInput | LancheIngredienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LancheIngredientes.
     */
    cursor?: LancheIngredienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LancheIngredientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LancheIngredientes.
     */
    skip?: number
    distinct?: LancheIngredienteScalarFieldEnum | LancheIngredienteScalarFieldEnum[]
  }

  /**
   * LancheIngrediente create
   */
  export type LancheIngredienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * The data needed to create a LancheIngrediente.
     */
    data: XOR<LancheIngredienteCreateInput, LancheIngredienteUncheckedCreateInput>
  }

  /**
   * LancheIngrediente createMany
   */
  export type LancheIngredienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LancheIngredientes.
     */
    data: LancheIngredienteCreateManyInput | LancheIngredienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LancheIngrediente createManyAndReturn
   */
  export type LancheIngredienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * The data used to create many LancheIngredientes.
     */
    data: LancheIngredienteCreateManyInput | LancheIngredienteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LancheIngrediente update
   */
  export type LancheIngredienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * The data needed to update a LancheIngrediente.
     */
    data: XOR<LancheIngredienteUpdateInput, LancheIngredienteUncheckedUpdateInput>
    /**
     * Choose, which LancheIngrediente to update.
     */
    where: LancheIngredienteWhereUniqueInput
  }

  /**
   * LancheIngrediente updateMany
   */
  export type LancheIngredienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LancheIngredientes.
     */
    data: XOR<LancheIngredienteUpdateManyMutationInput, LancheIngredienteUncheckedUpdateManyInput>
    /**
     * Filter which LancheIngredientes to update
     */
    where?: LancheIngredienteWhereInput
    /**
     * Limit how many LancheIngredientes to update.
     */
    limit?: number
  }

  /**
   * LancheIngrediente updateManyAndReturn
   */
  export type LancheIngredienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * The data used to update LancheIngredientes.
     */
    data: XOR<LancheIngredienteUpdateManyMutationInput, LancheIngredienteUncheckedUpdateManyInput>
    /**
     * Filter which LancheIngredientes to update
     */
    where?: LancheIngredienteWhereInput
    /**
     * Limit how many LancheIngredientes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LancheIngrediente upsert
   */
  export type LancheIngredienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * The filter to search for the LancheIngrediente to update in case it exists.
     */
    where: LancheIngredienteWhereUniqueInput
    /**
     * In case the LancheIngrediente found by the `where` argument doesn't exist, create a new LancheIngrediente with this data.
     */
    create: XOR<LancheIngredienteCreateInput, LancheIngredienteUncheckedCreateInput>
    /**
     * In case the LancheIngrediente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LancheIngredienteUpdateInput, LancheIngredienteUncheckedUpdateInput>
  }

  /**
   * LancheIngrediente delete
   */
  export type LancheIngredienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
    /**
     * Filter which LancheIngrediente to delete.
     */
    where: LancheIngredienteWhereUniqueInput
  }

  /**
   * LancheIngrediente deleteMany
   */
  export type LancheIngredienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LancheIngredientes to delete
     */
    where?: LancheIngredienteWhereInput
    /**
     * Limit how many LancheIngredientes to delete.
     */
    limit?: number
  }

  /**
   * LancheIngrediente without action
   */
  export type LancheIngredienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LancheIngrediente
     */
    select?: LancheIngredienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LancheIngrediente
     */
    omit?: LancheIngredienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LancheIngredienteInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
    email: string | null
    password: string | null
    image: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
    email: string | null
    password: string | null
    image: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    name: number
    address: number
    phone: number
    email: number
    password: number
    image: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    password?: true
    image?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    password?: true
    image?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    password?: true
    image?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    name: string
    address: string
    phone: string
    email: string
    password: string
    image: string | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    compras?: boolean | Cliente$comprasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "phone" | "email" | "password" | "image", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compras?: boolean | Cliente$comprasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      compras: Prisma.$CompraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      phone: string
      email: string
      password: string
      image: string | null
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clientes and returns the data saved in the database.
     * @param {ClienteCreateManyAndReturnArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clientes and only return the `id`
     * const clienteWithIdOnly = await prisma.cliente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClienteCreateManyAndReturnArgs>(args?: SelectSubset<T, ClienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes and returns the data updated in the database.
     * @param {ClienteUpdateManyAndReturnArgs} args - Arguments to update many Clientes.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clientes and only return the `id`
     * const clienteWithIdOnly = await prisma.cliente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClienteUpdateManyAndReturnArgs>(args: SelectSubset<T, ClienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    compras<T extends Cliente$comprasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$comprasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly name: FieldRef<"Cliente", 'String'>
    readonly address: FieldRef<"Cliente", 'String'>
    readonly phone: FieldRef<"Cliente", 'String'>
    readonly email: FieldRef<"Cliente", 'String'>
    readonly password: FieldRef<"Cliente", 'String'>
    readonly image: FieldRef<"Cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente createManyAndReturn
   */
  export type ClienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente updateManyAndReturn
   */
  export type ClienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.compras
   */
  export type Cliente$comprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    where?: CompraWhereInput
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Compra
   */

  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    total: number | null
  }

  export type CompraSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    total: number | null
  }

  export type CompraMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    total: number | null
    observacao: string | null
    createdAt: Date | null
    address: string | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    total: number | null
    observacao: string | null
    createdAt: Date | null
    address: string | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    clienteId: number
    total: number
    observacao: number
    createdAt: number
    address: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
    clienteId?: true
    total?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
    clienteId?: true
    total?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    clienteId?: true
    total?: true
    observacao?: true
    createdAt?: true
    address?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    clienteId?: true
    total?: true
    observacao?: true
    createdAt?: true
    address?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    clienteId?: true
    total?: true
    observacao?: true
    createdAt?: true
    address?: true
    _all?: true
  }

  export type CompraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compra to aggregate.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type CompraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraWhereInput
    orderBy?: CompraOrderByWithAggregationInput | CompraOrderByWithAggregationInput[]
    by: CompraScalarFieldEnum[] | CompraScalarFieldEnum
    having?: CompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }

  export type CompraGroupByOutputType = {
    id: number
    clienteId: number
    total: number
    observacao: string | null
    createdAt: Date
    address: string
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type CompraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    total?: boolean
    observacao?: boolean
    createdAt?: boolean
    address?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    lanches?: boolean | Compra$lanchesArgs<ExtArgs>
    _count?: boolean | CompraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type CompraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    total?: boolean
    observacao?: boolean
    createdAt?: boolean
    address?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type CompraSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    total?: boolean
    observacao?: boolean
    createdAt?: boolean
    address?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type CompraSelectScalar = {
    id?: boolean
    clienteId?: boolean
    total?: boolean
    observacao?: boolean
    createdAt?: boolean
    address?: boolean
  }

  export type CompraOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clienteId" | "total" | "observacao" | "createdAt" | "address", ExtArgs["result"]["compra"]>
  export type CompraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    lanches?: boolean | Compra$lanchesArgs<ExtArgs>
    _count?: boolean | CompraCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }
  export type CompraIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }

  export type $CompraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Compra"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
      lanches: Prisma.$CompraLanchePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      total: number
      observacao: string | null
      createdAt: Date
      address: string
    }, ExtArgs["result"]["compra"]>
    composites: {}
  }

  type CompraGetPayload<S extends boolean | null | undefined | CompraDefaultArgs> = $Result.GetResult<Prisma.$CompraPayload, S>

  type CompraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface CompraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Compra'], meta: { name: 'Compra' } }
    /**
     * Find zero or one Compra that matches the filter.
     * @param {CompraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompraFindUniqueArgs>(args: SelectSubset<T, CompraFindUniqueArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Compra that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompraFindUniqueOrThrowArgs>(args: SelectSubset<T, CompraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompraFindFirstArgs>(args?: SelectSubset<T, CompraFindFirstArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Compra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompraFindFirstOrThrowArgs>(args?: SelectSubset<T, CompraFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompraFindManyArgs>(args?: SelectSubset<T, CompraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Compra.
     * @param {CompraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
     */
    create<T extends CompraCreateArgs>(args: SelectSubset<T, CompraCreateArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Compras.
     * @param {CompraCreateManyArgs} args - Arguments to create many Compras.
     * @example
     * // Create many Compras
     * const compra = await prisma.compra.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompraCreateManyArgs>(args?: SelectSubset<T, CompraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Compras and returns the data saved in the database.
     * @param {CompraCreateManyAndReturnArgs} args - Arguments to create many Compras.
     * @example
     * // Create many Compras
     * const compra = await prisma.compra.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Compras and only return the `id`
     * const compraWithIdOnly = await prisma.compra.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompraCreateManyAndReturnArgs>(args?: SelectSubset<T, CompraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Compra.
     * @param {CompraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
     */
    delete<T extends CompraDeleteArgs>(args: SelectSubset<T, CompraDeleteArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Compra.
     * @param {CompraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompraUpdateArgs>(args: SelectSubset<T, CompraUpdateArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Compras.
     * @param {CompraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompraDeleteManyArgs>(args?: SelectSubset<T, CompraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompraUpdateManyArgs>(args: SelectSubset<T, CompraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras and returns the data updated in the database.
     * @param {CompraUpdateManyAndReturnArgs} args - Arguments to update many Compras.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Compras and only return the `id`
     * const compraWithIdOnly = await prisma.compra.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompraUpdateManyAndReturnArgs>(args: SelectSubset<T, CompraUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Compra.
     * @param {CompraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
     */
    upsert<T extends CompraUpsertArgs>(args: SelectSubset<T, CompraUpsertArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends CompraCountArgs>(
      args?: Subset<T, CompraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Compra model
   */
  readonly fields: CompraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lanches<T extends Compra$lanchesArgs<ExtArgs> = {}>(args?: Subset<T, Compra$lanchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Compra model
   */
  interface CompraFieldRefs {
    readonly id: FieldRef<"Compra", 'Int'>
    readonly clienteId: FieldRef<"Compra", 'Int'>
    readonly total: FieldRef<"Compra", 'Float'>
    readonly observacao: FieldRef<"Compra", 'String'>
    readonly createdAt: FieldRef<"Compra", 'DateTime'>
    readonly address: FieldRef<"Compra", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Compra findUnique
   */
  export type CompraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findUniqueOrThrow
   */
  export type CompraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findFirst
   */
  export type CompraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Compra findFirstOrThrow
   */
  export type CompraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Compra findMany
   */
  export type CompraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Compra create
   */
  export type CompraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * The data needed to create a Compra.
     */
    data: XOR<CompraCreateInput, CompraUncheckedCreateInput>
  }

  /**
   * Compra createMany
   */
  export type CompraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Compras.
     */
    data: CompraCreateManyInput | CompraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Compra createManyAndReturn
   */
  export type CompraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * The data used to create many Compras.
     */
    data: CompraCreateManyInput | CompraCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Compra update
   */
  export type CompraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * The data needed to update a Compra.
     */
    data: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
    /**
     * Choose, which Compra to update.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra updateMany
   */
  export type CompraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Compras.
     */
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: CompraWhereInput
    /**
     * Limit how many Compras to update.
     */
    limit?: number
  }

  /**
   * Compra updateManyAndReturn
   */
  export type CompraUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * The data used to update Compras.
     */
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: CompraWhereInput
    /**
     * Limit how many Compras to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Compra upsert
   */
  export type CompraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * The filter to search for the Compra to update in case it exists.
     */
    where: CompraWhereUniqueInput
    /**
     * In case the Compra found by the `where` argument doesn't exist, create a new Compra with this data.
     */
    create: XOR<CompraCreateInput, CompraUncheckedCreateInput>
    /**
     * In case the Compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
  }

  /**
   * Compra delete
   */
  export type CompraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter which Compra to delete.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra deleteMany
   */
  export type CompraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compras to delete
     */
    where?: CompraWhereInput
    /**
     * Limit how many Compras to delete.
     */
    limit?: number
  }

  /**
   * Compra.lanches
   */
  export type Compra$lanchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    where?: CompraLancheWhereInput
    orderBy?: CompraLancheOrderByWithRelationInput | CompraLancheOrderByWithRelationInput[]
    cursor?: CompraLancheWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompraLancheScalarFieldEnum | CompraLancheScalarFieldEnum[]
  }

  /**
   * Compra without action
   */
  export type CompraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compra
     */
    omit?: CompraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
  }


  /**
   * Model CompraLanche
   */

  export type AggregateCompraLanche = {
    _count: CompraLancheCountAggregateOutputType | null
    _avg: CompraLancheAvgAggregateOutputType | null
    _sum: CompraLancheSumAggregateOutputType | null
    _min: CompraLancheMinAggregateOutputType | null
    _max: CompraLancheMaxAggregateOutputType | null
  }

  export type CompraLancheAvgAggregateOutputType = {
    quantidade: number | null
    compraId: number | null
    lancheId: number | null
  }

  export type CompraLancheSumAggregateOutputType = {
    quantidade: number | null
    compraId: number | null
    lancheId: number | null
  }

  export type CompraLancheMinAggregateOutputType = {
    quantidade: number | null
    compraId: number | null
    lancheId: number | null
  }

  export type CompraLancheMaxAggregateOutputType = {
    quantidade: number | null
    compraId: number | null
    lancheId: number | null
  }

  export type CompraLancheCountAggregateOutputType = {
    quantidade: number
    compraId: number
    lancheId: number
    _all: number
  }


  export type CompraLancheAvgAggregateInputType = {
    quantidade?: true
    compraId?: true
    lancheId?: true
  }

  export type CompraLancheSumAggregateInputType = {
    quantidade?: true
    compraId?: true
    lancheId?: true
  }

  export type CompraLancheMinAggregateInputType = {
    quantidade?: true
    compraId?: true
    lancheId?: true
  }

  export type CompraLancheMaxAggregateInputType = {
    quantidade?: true
    compraId?: true
    lancheId?: true
  }

  export type CompraLancheCountAggregateInputType = {
    quantidade?: true
    compraId?: true
    lancheId?: true
    _all?: true
  }

  export type CompraLancheAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompraLanche to aggregate.
     */
    where?: CompraLancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraLanches to fetch.
     */
    orderBy?: CompraLancheOrderByWithRelationInput | CompraLancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraLancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraLanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraLanches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompraLanches
    **/
    _count?: true | CompraLancheCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraLancheAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraLancheSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraLancheMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraLancheMaxAggregateInputType
  }

  export type GetCompraLancheAggregateType<T extends CompraLancheAggregateArgs> = {
        [P in keyof T & keyof AggregateCompraLanche]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompraLanche[P]>
      : GetScalarType<T[P], AggregateCompraLanche[P]>
  }




  export type CompraLancheGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraLancheWhereInput
    orderBy?: CompraLancheOrderByWithAggregationInput | CompraLancheOrderByWithAggregationInput[]
    by: CompraLancheScalarFieldEnum[] | CompraLancheScalarFieldEnum
    having?: CompraLancheScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraLancheCountAggregateInputType | true
    _avg?: CompraLancheAvgAggregateInputType
    _sum?: CompraLancheSumAggregateInputType
    _min?: CompraLancheMinAggregateInputType
    _max?: CompraLancheMaxAggregateInputType
  }

  export type CompraLancheGroupByOutputType = {
    quantidade: number
    compraId: number
    lancheId: number
    _count: CompraLancheCountAggregateOutputType | null
    _avg: CompraLancheAvgAggregateOutputType | null
    _sum: CompraLancheSumAggregateOutputType | null
    _min: CompraLancheMinAggregateOutputType | null
    _max: CompraLancheMaxAggregateOutputType | null
  }

  type GetCompraLancheGroupByPayload<T extends CompraLancheGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompraLancheGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraLancheGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraLancheGroupByOutputType[P]>
            : GetScalarType<T[P], CompraLancheGroupByOutputType[P]>
        }
      >
    >


  export type CompraLancheSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    quantidade?: boolean
    compraId?: boolean
    lancheId?: boolean
    compra?: boolean | CompraDefaultArgs<ExtArgs>
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compraLanche"]>

  export type CompraLancheSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    quantidade?: boolean
    compraId?: boolean
    lancheId?: boolean
    compra?: boolean | CompraDefaultArgs<ExtArgs>
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compraLanche"]>

  export type CompraLancheSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    quantidade?: boolean
    compraId?: boolean
    lancheId?: boolean
    compra?: boolean | CompraDefaultArgs<ExtArgs>
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compraLanche"]>

  export type CompraLancheSelectScalar = {
    quantidade?: boolean
    compraId?: boolean
    lancheId?: boolean
  }

  export type CompraLancheOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"quantidade" | "compraId" | "lancheId", ExtArgs["result"]["compraLanche"]>
  export type CompraLancheInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compra?: boolean | CompraDefaultArgs<ExtArgs>
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
  }
  export type CompraLancheIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compra?: boolean | CompraDefaultArgs<ExtArgs>
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
  }
  export type CompraLancheIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compra?: boolean | CompraDefaultArgs<ExtArgs>
    lanche?: boolean | LancheDefaultArgs<ExtArgs>
  }

  export type $CompraLanchePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompraLanche"
    objects: {
      compra: Prisma.$CompraPayload<ExtArgs>
      lanche: Prisma.$LanchePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      quantidade: number
      compraId: number
      lancheId: number
    }, ExtArgs["result"]["compraLanche"]>
    composites: {}
  }

  type CompraLancheGetPayload<S extends boolean | null | undefined | CompraLancheDefaultArgs> = $Result.GetResult<Prisma.$CompraLanchePayload, S>

  type CompraLancheCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompraLancheFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompraLancheCountAggregateInputType | true
    }

  export interface CompraLancheDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompraLanche'], meta: { name: 'CompraLanche' } }
    /**
     * Find zero or one CompraLanche that matches the filter.
     * @param {CompraLancheFindUniqueArgs} args - Arguments to find a CompraLanche
     * @example
     * // Get one CompraLanche
     * const compraLanche = await prisma.compraLanche.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompraLancheFindUniqueArgs>(args: SelectSubset<T, CompraLancheFindUniqueArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompraLanche that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompraLancheFindUniqueOrThrowArgs} args - Arguments to find a CompraLanche
     * @example
     * // Get one CompraLanche
     * const compraLanche = await prisma.compraLanche.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompraLancheFindUniqueOrThrowArgs>(args: SelectSubset<T, CompraLancheFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompraLanche that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheFindFirstArgs} args - Arguments to find a CompraLanche
     * @example
     * // Get one CompraLanche
     * const compraLanche = await prisma.compraLanche.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompraLancheFindFirstArgs>(args?: SelectSubset<T, CompraLancheFindFirstArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompraLanche that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheFindFirstOrThrowArgs} args - Arguments to find a CompraLanche
     * @example
     * // Get one CompraLanche
     * const compraLanche = await prisma.compraLanche.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompraLancheFindFirstOrThrowArgs>(args?: SelectSubset<T, CompraLancheFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompraLanches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompraLanches
     * const compraLanches = await prisma.compraLanche.findMany()
     * 
     * // Get first 10 CompraLanches
     * const compraLanches = await prisma.compraLanche.findMany({ take: 10 })
     * 
     * // Only select the `quantidade`
     * const compraLancheWithQuantidadeOnly = await prisma.compraLanche.findMany({ select: { quantidade: true } })
     * 
     */
    findMany<T extends CompraLancheFindManyArgs>(args?: SelectSubset<T, CompraLancheFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompraLanche.
     * @param {CompraLancheCreateArgs} args - Arguments to create a CompraLanche.
     * @example
     * // Create one CompraLanche
     * const CompraLanche = await prisma.compraLanche.create({
     *   data: {
     *     // ... data to create a CompraLanche
     *   }
     * })
     * 
     */
    create<T extends CompraLancheCreateArgs>(args: SelectSubset<T, CompraLancheCreateArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompraLanches.
     * @param {CompraLancheCreateManyArgs} args - Arguments to create many CompraLanches.
     * @example
     * // Create many CompraLanches
     * const compraLanche = await prisma.compraLanche.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompraLancheCreateManyArgs>(args?: SelectSubset<T, CompraLancheCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompraLanches and returns the data saved in the database.
     * @param {CompraLancheCreateManyAndReturnArgs} args - Arguments to create many CompraLanches.
     * @example
     * // Create many CompraLanches
     * const compraLanche = await prisma.compraLanche.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompraLanches and only return the `quantidade`
     * const compraLancheWithQuantidadeOnly = await prisma.compraLanche.createManyAndReturn({
     *   select: { quantidade: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompraLancheCreateManyAndReturnArgs>(args?: SelectSubset<T, CompraLancheCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompraLanche.
     * @param {CompraLancheDeleteArgs} args - Arguments to delete one CompraLanche.
     * @example
     * // Delete one CompraLanche
     * const CompraLanche = await prisma.compraLanche.delete({
     *   where: {
     *     // ... filter to delete one CompraLanche
     *   }
     * })
     * 
     */
    delete<T extends CompraLancheDeleteArgs>(args: SelectSubset<T, CompraLancheDeleteArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompraLanche.
     * @param {CompraLancheUpdateArgs} args - Arguments to update one CompraLanche.
     * @example
     * // Update one CompraLanche
     * const compraLanche = await prisma.compraLanche.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompraLancheUpdateArgs>(args: SelectSubset<T, CompraLancheUpdateArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompraLanches.
     * @param {CompraLancheDeleteManyArgs} args - Arguments to filter CompraLanches to delete.
     * @example
     * // Delete a few CompraLanches
     * const { count } = await prisma.compraLanche.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompraLancheDeleteManyArgs>(args?: SelectSubset<T, CompraLancheDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompraLanches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompraLanches
     * const compraLanche = await prisma.compraLanche.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompraLancheUpdateManyArgs>(args: SelectSubset<T, CompraLancheUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompraLanches and returns the data updated in the database.
     * @param {CompraLancheUpdateManyAndReturnArgs} args - Arguments to update many CompraLanches.
     * @example
     * // Update many CompraLanches
     * const compraLanche = await prisma.compraLanche.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompraLanches and only return the `quantidade`
     * const compraLancheWithQuantidadeOnly = await prisma.compraLanche.updateManyAndReturn({
     *   select: { quantidade: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompraLancheUpdateManyAndReturnArgs>(args: SelectSubset<T, CompraLancheUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompraLanche.
     * @param {CompraLancheUpsertArgs} args - Arguments to update or create a CompraLanche.
     * @example
     * // Update or create a CompraLanche
     * const compraLanche = await prisma.compraLanche.upsert({
     *   create: {
     *     // ... data to create a CompraLanche
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompraLanche we want to update
     *   }
     * })
     */
    upsert<T extends CompraLancheUpsertArgs>(args: SelectSubset<T, CompraLancheUpsertArgs<ExtArgs>>): Prisma__CompraLancheClient<$Result.GetResult<Prisma.$CompraLanchePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompraLanches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheCountArgs} args - Arguments to filter CompraLanches to count.
     * @example
     * // Count the number of CompraLanches
     * const count = await prisma.compraLanche.count({
     *   where: {
     *     // ... the filter for the CompraLanches we want to count
     *   }
     * })
    **/
    count<T extends CompraLancheCountArgs>(
      args?: Subset<T, CompraLancheCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraLancheCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompraLanche.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraLancheAggregateArgs>(args: Subset<T, CompraLancheAggregateArgs>): Prisma.PrismaPromise<GetCompraLancheAggregateType<T>>

    /**
     * Group by CompraLanche.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraLancheGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraLancheGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraLancheGroupByArgs['orderBy'] }
        : { orderBy?: CompraLancheGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraLancheGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraLancheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompraLanche model
   */
  readonly fields: CompraLancheFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompraLanche.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompraLancheClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    compra<T extends CompraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompraDefaultArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lanche<T extends LancheDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LancheDefaultArgs<ExtArgs>>): Prisma__LancheClient<$Result.GetResult<Prisma.$LanchePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompraLanche model
   */
  interface CompraLancheFieldRefs {
    readonly quantidade: FieldRef<"CompraLanche", 'Int'>
    readonly compraId: FieldRef<"CompraLanche", 'Int'>
    readonly lancheId: FieldRef<"CompraLanche", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CompraLanche findUnique
   */
  export type CompraLancheFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * Filter, which CompraLanche to fetch.
     */
    where: CompraLancheWhereUniqueInput
  }

  /**
   * CompraLanche findUniqueOrThrow
   */
  export type CompraLancheFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * Filter, which CompraLanche to fetch.
     */
    where: CompraLancheWhereUniqueInput
  }

  /**
   * CompraLanche findFirst
   */
  export type CompraLancheFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * Filter, which CompraLanche to fetch.
     */
    where?: CompraLancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraLanches to fetch.
     */
    orderBy?: CompraLancheOrderByWithRelationInput | CompraLancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraLanches.
     */
    cursor?: CompraLancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraLanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraLanches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraLanches.
     */
    distinct?: CompraLancheScalarFieldEnum | CompraLancheScalarFieldEnum[]
  }

  /**
   * CompraLanche findFirstOrThrow
   */
  export type CompraLancheFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * Filter, which CompraLanche to fetch.
     */
    where?: CompraLancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraLanches to fetch.
     */
    orderBy?: CompraLancheOrderByWithRelationInput | CompraLancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraLanches.
     */
    cursor?: CompraLancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraLanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraLanches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraLanches.
     */
    distinct?: CompraLancheScalarFieldEnum | CompraLancheScalarFieldEnum[]
  }

  /**
   * CompraLanche findMany
   */
  export type CompraLancheFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * Filter, which CompraLanches to fetch.
     */
    where?: CompraLancheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraLanches to fetch.
     */
    orderBy?: CompraLancheOrderByWithRelationInput | CompraLancheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompraLanches.
     */
    cursor?: CompraLancheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraLanches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraLanches.
     */
    skip?: number
    distinct?: CompraLancheScalarFieldEnum | CompraLancheScalarFieldEnum[]
  }

  /**
   * CompraLanche create
   */
  export type CompraLancheCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * The data needed to create a CompraLanche.
     */
    data: XOR<CompraLancheCreateInput, CompraLancheUncheckedCreateInput>
  }

  /**
   * CompraLanche createMany
   */
  export type CompraLancheCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompraLanches.
     */
    data: CompraLancheCreateManyInput | CompraLancheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompraLanche createManyAndReturn
   */
  export type CompraLancheCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * The data used to create many CompraLanches.
     */
    data: CompraLancheCreateManyInput | CompraLancheCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompraLanche update
   */
  export type CompraLancheUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * The data needed to update a CompraLanche.
     */
    data: XOR<CompraLancheUpdateInput, CompraLancheUncheckedUpdateInput>
    /**
     * Choose, which CompraLanche to update.
     */
    where: CompraLancheWhereUniqueInput
  }

  /**
   * CompraLanche updateMany
   */
  export type CompraLancheUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompraLanches.
     */
    data: XOR<CompraLancheUpdateManyMutationInput, CompraLancheUncheckedUpdateManyInput>
    /**
     * Filter which CompraLanches to update
     */
    where?: CompraLancheWhereInput
    /**
     * Limit how many CompraLanches to update.
     */
    limit?: number
  }

  /**
   * CompraLanche updateManyAndReturn
   */
  export type CompraLancheUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * The data used to update CompraLanches.
     */
    data: XOR<CompraLancheUpdateManyMutationInput, CompraLancheUncheckedUpdateManyInput>
    /**
     * Filter which CompraLanches to update
     */
    where?: CompraLancheWhereInput
    /**
     * Limit how many CompraLanches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompraLanche upsert
   */
  export type CompraLancheUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * The filter to search for the CompraLanche to update in case it exists.
     */
    where: CompraLancheWhereUniqueInput
    /**
     * In case the CompraLanche found by the `where` argument doesn't exist, create a new CompraLanche with this data.
     */
    create: XOR<CompraLancheCreateInput, CompraLancheUncheckedCreateInput>
    /**
     * In case the CompraLanche was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraLancheUpdateInput, CompraLancheUncheckedUpdateInput>
  }

  /**
   * CompraLanche delete
   */
  export type CompraLancheDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
    /**
     * Filter which CompraLanche to delete.
     */
    where: CompraLancheWhereUniqueInput
  }

  /**
   * CompraLanche deleteMany
   */
  export type CompraLancheDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompraLanches to delete
     */
    where?: CompraLancheWhereInput
    /**
     * Limit how many CompraLanches to delete.
     */
    limit?: number
  }

  /**
   * CompraLanche without action
   */
  export type CompraLancheDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraLanche
     */
    select?: CompraLancheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompraLanche
     */
    omit?: CompraLancheOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraLancheInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LancheScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    image: 'image'
  };

  export type LancheScalarFieldEnum = (typeof LancheScalarFieldEnum)[keyof typeof LancheScalarFieldEnum]


  export const IngredienteScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type IngredienteScalarFieldEnum = (typeof IngredienteScalarFieldEnum)[keyof typeof IngredienteScalarFieldEnum]


  export const LancheIngredienteScalarFieldEnum: {
    lanche_id: 'lanche_id',
    ingrediente_id: 'ingrediente_id'
  };

  export type LancheIngredienteScalarFieldEnum = (typeof LancheIngredienteScalarFieldEnum)[keyof typeof LancheIngredienteScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    phone: 'phone',
    email: 'email',
    password: 'password',
    image: 'image'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    total: 'total',
    observacao: 'observacao',
    createdAt: 'createdAt',
    address: 'address'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const CompraLancheScalarFieldEnum: {
    quantidade: 'quantidade',
    compraId: 'compraId',
    lancheId: 'lancheId'
  };

  export type CompraLancheScalarFieldEnum = (typeof CompraLancheScalarFieldEnum)[keyof typeof CompraLancheScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type LancheWhereInput = {
    AND?: LancheWhereInput | LancheWhereInput[]
    OR?: LancheWhereInput[]
    NOT?: LancheWhereInput | LancheWhereInput[]
    id?: IntFilter<"Lanche"> | number
    name?: StringFilter<"Lanche"> | string
    description?: StringFilter<"Lanche"> | string
    price?: FloatFilter<"Lanche"> | number
    image?: StringFilter<"Lanche"> | string
    ingredientes?: LancheIngredienteListRelationFilter
    comprasLanches?: CompraLancheListRelationFilter
  }

  export type LancheOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    ingredientes?: LancheIngredienteOrderByRelationAggregateInput
    comprasLanches?: CompraLancheOrderByRelationAggregateInput
  }

  export type LancheWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LancheWhereInput | LancheWhereInput[]
    OR?: LancheWhereInput[]
    NOT?: LancheWhereInput | LancheWhereInput[]
    name?: StringFilter<"Lanche"> | string
    description?: StringFilter<"Lanche"> | string
    price?: FloatFilter<"Lanche"> | number
    image?: StringFilter<"Lanche"> | string
    ingredientes?: LancheIngredienteListRelationFilter
    comprasLanches?: CompraLancheListRelationFilter
  }, "id">

  export type LancheOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
    _count?: LancheCountOrderByAggregateInput
    _avg?: LancheAvgOrderByAggregateInput
    _max?: LancheMaxOrderByAggregateInput
    _min?: LancheMinOrderByAggregateInput
    _sum?: LancheSumOrderByAggregateInput
  }

  export type LancheScalarWhereWithAggregatesInput = {
    AND?: LancheScalarWhereWithAggregatesInput | LancheScalarWhereWithAggregatesInput[]
    OR?: LancheScalarWhereWithAggregatesInput[]
    NOT?: LancheScalarWhereWithAggregatesInput | LancheScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lanche"> | number
    name?: StringWithAggregatesFilter<"Lanche"> | string
    description?: StringWithAggregatesFilter<"Lanche"> | string
    price?: FloatWithAggregatesFilter<"Lanche"> | number
    image?: StringWithAggregatesFilter<"Lanche"> | string
  }

  export type IngredienteWhereInput = {
    AND?: IngredienteWhereInput | IngredienteWhereInput[]
    OR?: IngredienteWhereInput[]
    NOT?: IngredienteWhereInput | IngredienteWhereInput[]
    id?: IntFilter<"Ingrediente"> | number
    name?: StringFilter<"Ingrediente"> | string
    lanches?: LancheIngredienteListRelationFilter
  }

  export type IngredienteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    lanches?: LancheIngredienteOrderByRelationAggregateInput
  }

  export type IngredienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IngredienteWhereInput | IngredienteWhereInput[]
    OR?: IngredienteWhereInput[]
    NOT?: IngredienteWhereInput | IngredienteWhereInput[]
    name?: StringFilter<"Ingrediente"> | string
    lanches?: LancheIngredienteListRelationFilter
  }, "id">

  export type IngredienteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: IngredienteCountOrderByAggregateInput
    _avg?: IngredienteAvgOrderByAggregateInput
    _max?: IngredienteMaxOrderByAggregateInput
    _min?: IngredienteMinOrderByAggregateInput
    _sum?: IngredienteSumOrderByAggregateInput
  }

  export type IngredienteScalarWhereWithAggregatesInput = {
    AND?: IngredienteScalarWhereWithAggregatesInput | IngredienteScalarWhereWithAggregatesInput[]
    OR?: IngredienteScalarWhereWithAggregatesInput[]
    NOT?: IngredienteScalarWhereWithAggregatesInput | IngredienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ingrediente"> | number
    name?: StringWithAggregatesFilter<"Ingrediente"> | string
  }

  export type LancheIngredienteWhereInput = {
    AND?: LancheIngredienteWhereInput | LancheIngredienteWhereInput[]
    OR?: LancheIngredienteWhereInput[]
    NOT?: LancheIngredienteWhereInput | LancheIngredienteWhereInput[]
    lanche_id?: IntFilter<"LancheIngrediente"> | number
    ingrediente_id?: IntFilter<"LancheIngrediente"> | number
    lanche?: XOR<LancheScalarRelationFilter, LancheWhereInput>
    ingrediente?: XOR<IngredienteScalarRelationFilter, IngredienteWhereInput>
  }

  export type LancheIngredienteOrderByWithRelationInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
    lanche?: LancheOrderByWithRelationInput
    ingrediente?: IngredienteOrderByWithRelationInput
  }

  export type LancheIngredienteWhereUniqueInput = Prisma.AtLeast<{
    lanche_id_ingrediente_id?: LancheIngredienteLanche_idIngrediente_idCompoundUniqueInput
    AND?: LancheIngredienteWhereInput | LancheIngredienteWhereInput[]
    OR?: LancheIngredienteWhereInput[]
    NOT?: LancheIngredienteWhereInput | LancheIngredienteWhereInput[]
    lanche_id?: IntFilter<"LancheIngrediente"> | number
    ingrediente_id?: IntFilter<"LancheIngrediente"> | number
    lanche?: XOR<LancheScalarRelationFilter, LancheWhereInput>
    ingrediente?: XOR<IngredienteScalarRelationFilter, IngredienteWhereInput>
  }, "lanche_id_ingrediente_id">

  export type LancheIngredienteOrderByWithAggregationInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
    _count?: LancheIngredienteCountOrderByAggregateInput
    _avg?: LancheIngredienteAvgOrderByAggregateInput
    _max?: LancheIngredienteMaxOrderByAggregateInput
    _min?: LancheIngredienteMinOrderByAggregateInput
    _sum?: LancheIngredienteSumOrderByAggregateInput
  }

  export type LancheIngredienteScalarWhereWithAggregatesInput = {
    AND?: LancheIngredienteScalarWhereWithAggregatesInput | LancheIngredienteScalarWhereWithAggregatesInput[]
    OR?: LancheIngredienteScalarWhereWithAggregatesInput[]
    NOT?: LancheIngredienteScalarWhereWithAggregatesInput | LancheIngredienteScalarWhereWithAggregatesInput[]
    lanche_id?: IntWithAggregatesFilter<"LancheIngrediente"> | number
    ingrediente_id?: IntWithAggregatesFilter<"LancheIngrediente"> | number
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    name?: StringFilter<"Cliente"> | string
    address?: StringFilter<"Cliente"> | string
    phone?: StringFilter<"Cliente"> | string
    email?: StringFilter<"Cliente"> | string
    password?: StringFilter<"Cliente"> | string
    image?: StringNullableFilter<"Cliente"> | string | null
    compras?: CompraListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    compras?: CompraOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    name?: StringFilter<"Cliente"> | string
    address?: StringFilter<"Cliente"> | string
    phone?: StringFilter<"Cliente"> | string
    password?: StringFilter<"Cliente"> | string
    image?: StringNullableFilter<"Cliente"> | string | null
    compras?: CompraListRelationFilter
  }, "id" | "email">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    name?: StringWithAggregatesFilter<"Cliente"> | string
    address?: StringWithAggregatesFilter<"Cliente"> | string
    phone?: StringWithAggregatesFilter<"Cliente"> | string
    email?: StringWithAggregatesFilter<"Cliente"> | string
    password?: StringWithAggregatesFilter<"Cliente"> | string
    image?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
  }

  export type CompraWhereInput = {
    AND?: CompraWhereInput | CompraWhereInput[]
    OR?: CompraWhereInput[]
    NOT?: CompraWhereInput | CompraWhereInput[]
    id?: IntFilter<"Compra"> | number
    clienteId?: IntFilter<"Compra"> | number
    total?: FloatFilter<"Compra"> | number
    observacao?: StringNullableFilter<"Compra"> | string | null
    createdAt?: DateTimeFilter<"Compra"> | Date | string
    address?: StringFilter<"Compra"> | string
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    lanches?: CompraLancheListRelationFilter
  }

  export type CompraOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
    observacao?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    address?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    lanches?: CompraLancheOrderByRelationAggregateInput
  }

  export type CompraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompraWhereInput | CompraWhereInput[]
    OR?: CompraWhereInput[]
    NOT?: CompraWhereInput | CompraWhereInput[]
    clienteId?: IntFilter<"Compra"> | number
    total?: FloatFilter<"Compra"> | number
    observacao?: StringNullableFilter<"Compra"> | string | null
    createdAt?: DateTimeFilter<"Compra"> | Date | string
    address?: StringFilter<"Compra"> | string
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    lanches?: CompraLancheListRelationFilter
  }, "id">

  export type CompraOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
    observacao?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    address?: SortOrder
    _count?: CompraCountOrderByAggregateInput
    _avg?: CompraAvgOrderByAggregateInput
    _max?: CompraMaxOrderByAggregateInput
    _min?: CompraMinOrderByAggregateInput
    _sum?: CompraSumOrderByAggregateInput
  }

  export type CompraScalarWhereWithAggregatesInput = {
    AND?: CompraScalarWhereWithAggregatesInput | CompraScalarWhereWithAggregatesInput[]
    OR?: CompraScalarWhereWithAggregatesInput[]
    NOT?: CompraScalarWhereWithAggregatesInput | CompraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Compra"> | number
    clienteId?: IntWithAggregatesFilter<"Compra"> | number
    total?: FloatWithAggregatesFilter<"Compra"> | number
    observacao?: StringNullableWithAggregatesFilter<"Compra"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Compra"> | Date | string
    address?: StringWithAggregatesFilter<"Compra"> | string
  }

  export type CompraLancheWhereInput = {
    AND?: CompraLancheWhereInput | CompraLancheWhereInput[]
    OR?: CompraLancheWhereInput[]
    NOT?: CompraLancheWhereInput | CompraLancheWhereInput[]
    quantidade?: IntFilter<"CompraLanche"> | number
    compraId?: IntFilter<"CompraLanche"> | number
    lancheId?: IntFilter<"CompraLanche"> | number
    compra?: XOR<CompraScalarRelationFilter, CompraWhereInput>
    lanche?: XOR<LancheScalarRelationFilter, LancheWhereInput>
  }

  export type CompraLancheOrderByWithRelationInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
    compra?: CompraOrderByWithRelationInput
    lanche?: LancheOrderByWithRelationInput
  }

  export type CompraLancheWhereUniqueInput = Prisma.AtLeast<{
    compraId_lancheId?: CompraLancheCompraIdLancheIdCompoundUniqueInput
    AND?: CompraLancheWhereInput | CompraLancheWhereInput[]
    OR?: CompraLancheWhereInput[]
    NOT?: CompraLancheWhereInput | CompraLancheWhereInput[]
    quantidade?: IntFilter<"CompraLanche"> | number
    compraId?: IntFilter<"CompraLanche"> | number
    lancheId?: IntFilter<"CompraLanche"> | number
    compra?: XOR<CompraScalarRelationFilter, CompraWhereInput>
    lanche?: XOR<LancheScalarRelationFilter, LancheWhereInput>
  }, "compraId_lancheId">

  export type CompraLancheOrderByWithAggregationInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
    _count?: CompraLancheCountOrderByAggregateInput
    _avg?: CompraLancheAvgOrderByAggregateInput
    _max?: CompraLancheMaxOrderByAggregateInput
    _min?: CompraLancheMinOrderByAggregateInput
    _sum?: CompraLancheSumOrderByAggregateInput
  }

  export type CompraLancheScalarWhereWithAggregatesInput = {
    AND?: CompraLancheScalarWhereWithAggregatesInput | CompraLancheScalarWhereWithAggregatesInput[]
    OR?: CompraLancheScalarWhereWithAggregatesInput[]
    NOT?: CompraLancheScalarWhereWithAggregatesInput | CompraLancheScalarWhereWithAggregatesInput[]
    quantidade?: IntWithAggregatesFilter<"CompraLanche"> | number
    compraId?: IntWithAggregatesFilter<"CompraLanche"> | number
    lancheId?: IntWithAggregatesFilter<"CompraLanche"> | number
  }

  export type LancheCreateInput = {
    name: string
    description: string
    price: number
    image: string
    ingredientes?: LancheIngredienteCreateNestedManyWithoutLancheInput
    comprasLanches?: CompraLancheCreateNestedManyWithoutLancheInput
  }

  export type LancheUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    price: number
    image: string
    ingredientes?: LancheIngredienteUncheckedCreateNestedManyWithoutLancheInput
    comprasLanches?: CompraLancheUncheckedCreateNestedManyWithoutLancheInput
  }

  export type LancheUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    ingredientes?: LancheIngredienteUpdateManyWithoutLancheNestedInput
    comprasLanches?: CompraLancheUpdateManyWithoutLancheNestedInput
  }

  export type LancheUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    ingredientes?: LancheIngredienteUncheckedUpdateManyWithoutLancheNestedInput
    comprasLanches?: CompraLancheUncheckedUpdateManyWithoutLancheNestedInput
  }

  export type LancheCreateManyInput = {
    id?: number
    name: string
    description: string
    price: number
    image: string
  }

  export type LancheUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
  }

  export type LancheUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
  }

  export type IngredienteCreateInput = {
    name: string
    lanches?: LancheIngredienteCreateNestedManyWithoutIngredienteInput
  }

  export type IngredienteUncheckedCreateInput = {
    id?: number
    name: string
    lanches?: LancheIngredienteUncheckedCreateNestedManyWithoutIngredienteInput
  }

  export type IngredienteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lanches?: LancheIngredienteUpdateManyWithoutIngredienteNestedInput
  }

  export type IngredienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lanches?: LancheIngredienteUncheckedUpdateManyWithoutIngredienteNestedInput
  }

  export type IngredienteCreateManyInput = {
    id?: number
    name: string
  }

  export type IngredienteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IngredienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LancheIngredienteCreateInput = {
    lanche: LancheCreateNestedOneWithoutIngredientesInput
    ingrediente: IngredienteCreateNestedOneWithoutLanchesInput
  }

  export type LancheIngredienteUncheckedCreateInput = {
    lanche_id: number
    ingrediente_id: number
  }

  export type LancheIngredienteUpdateInput = {
    lanche?: LancheUpdateOneRequiredWithoutIngredientesNestedInput
    ingrediente?: IngredienteUpdateOneRequiredWithoutLanchesNestedInput
  }

  export type LancheIngredienteUncheckedUpdateInput = {
    lanche_id?: IntFieldUpdateOperationsInput | number
    ingrediente_id?: IntFieldUpdateOperationsInput | number
  }

  export type LancheIngredienteCreateManyInput = {
    lanche_id: number
    ingrediente_id: number
  }

  export type LancheIngredienteUpdateManyMutationInput = {

  }

  export type LancheIngredienteUncheckedUpdateManyInput = {
    lanche_id?: IntFieldUpdateOperationsInput | number
    ingrediente_id?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteCreateInput = {
    name: string
    address: string
    phone: string
    email: string
    password: string
    image?: string | null
    compras?: CompraCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    phone: string
    email: string
    password: string
    image?: string | null
    compras?: CompraUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    compras?: CompraUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    compras?: CompraUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    name: string
    address: string
    phone: string
    email: string
    password: string
    image?: string | null
  }

  export type ClienteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompraCreateInput = {
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
    cliente: ClienteCreateNestedOneWithoutComprasInput
    lanches?: CompraLancheCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateInput = {
    id?: number
    clienteId: number
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
    lanches?: CompraLancheUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraUpdateInput = {
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutComprasNestedInput
    lanches?: CompraLancheUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    lanches?: CompraLancheUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type CompraCreateManyInput = {
    id?: number
    clienteId: number
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
  }

  export type CompraUpdateManyMutationInput = {
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type CompraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type CompraLancheCreateInput = {
    quantidade: number
    compra: CompraCreateNestedOneWithoutLanchesInput
    lanche: LancheCreateNestedOneWithoutComprasLanchesInput
  }

  export type CompraLancheUncheckedCreateInput = {
    quantidade: number
    compraId: number
    lancheId: number
  }

  export type CompraLancheUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    compra?: CompraUpdateOneRequiredWithoutLanchesNestedInput
    lanche?: LancheUpdateOneRequiredWithoutComprasLanchesNestedInput
  }

  export type CompraLancheUncheckedUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    compraId?: IntFieldUpdateOperationsInput | number
    lancheId?: IntFieldUpdateOperationsInput | number
  }

  export type CompraLancheCreateManyInput = {
    quantidade: number
    compraId: number
    lancheId: number
  }

  export type CompraLancheUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type CompraLancheUncheckedUpdateManyInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    compraId?: IntFieldUpdateOperationsInput | number
    lancheId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LancheIngredienteListRelationFilter = {
    every?: LancheIngredienteWhereInput
    some?: LancheIngredienteWhereInput
    none?: LancheIngredienteWhereInput
  }

  export type CompraLancheListRelationFilter = {
    every?: CompraLancheWhereInput
    some?: CompraLancheWhereInput
    none?: CompraLancheWhereInput
  }

  export type LancheIngredienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompraLancheOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LancheCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
  }

  export type LancheAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type LancheMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
  }

  export type LancheMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    image?: SortOrder
  }

  export type LancheSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IngredienteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IngredienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IngredienteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IngredienteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IngredienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LancheScalarRelationFilter = {
    is?: LancheWhereInput
    isNot?: LancheWhereInput
  }

  export type IngredienteScalarRelationFilter = {
    is?: IngredienteWhereInput
    isNot?: IngredienteWhereInput
  }

  export type LancheIngredienteLanche_idIngrediente_idCompoundUniqueInput = {
    lanche_id: number
    ingrediente_id: number
  }

  export type LancheIngredienteCountOrderByAggregateInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
  }

  export type LancheIngredienteAvgOrderByAggregateInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
  }

  export type LancheIngredienteMaxOrderByAggregateInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
  }

  export type LancheIngredienteMinOrderByAggregateInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
  }

  export type LancheIngredienteSumOrderByAggregateInput = {
    lanche_id?: SortOrder
    ingrediente_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CompraListRelationFilter = {
    every?: CompraWhereInput
    some?: CompraWhereInput
    none?: CompraWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CompraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ClienteScalarRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type CompraCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
    observacao?: SortOrder
    createdAt?: SortOrder
    address?: SortOrder
  }

  export type CompraAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
  }

  export type CompraMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
    observacao?: SortOrder
    createdAt?: SortOrder
    address?: SortOrder
  }

  export type CompraMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
    observacao?: SortOrder
    createdAt?: SortOrder
    address?: SortOrder
  }

  export type CompraSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    total?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CompraScalarRelationFilter = {
    is?: CompraWhereInput
    isNot?: CompraWhereInput
  }

  export type CompraLancheCompraIdLancheIdCompoundUniqueInput = {
    compraId: number
    lancheId: number
  }

  export type CompraLancheCountOrderByAggregateInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
  }

  export type CompraLancheAvgOrderByAggregateInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
  }

  export type CompraLancheMaxOrderByAggregateInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
  }

  export type CompraLancheMinOrderByAggregateInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
  }

  export type CompraLancheSumOrderByAggregateInput = {
    quantidade?: SortOrder
    compraId?: SortOrder
    lancheId?: SortOrder
  }

  export type LancheIngredienteCreateNestedManyWithoutLancheInput = {
    create?: XOR<LancheIngredienteCreateWithoutLancheInput, LancheIngredienteUncheckedCreateWithoutLancheInput> | LancheIngredienteCreateWithoutLancheInput[] | LancheIngredienteUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutLancheInput | LancheIngredienteCreateOrConnectWithoutLancheInput[]
    createMany?: LancheIngredienteCreateManyLancheInputEnvelope
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
  }

  export type CompraLancheCreateNestedManyWithoutLancheInput = {
    create?: XOR<CompraLancheCreateWithoutLancheInput, CompraLancheUncheckedCreateWithoutLancheInput> | CompraLancheCreateWithoutLancheInput[] | CompraLancheUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutLancheInput | CompraLancheCreateOrConnectWithoutLancheInput[]
    createMany?: CompraLancheCreateManyLancheInputEnvelope
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
  }

  export type LancheIngredienteUncheckedCreateNestedManyWithoutLancheInput = {
    create?: XOR<LancheIngredienteCreateWithoutLancheInput, LancheIngredienteUncheckedCreateWithoutLancheInput> | LancheIngredienteCreateWithoutLancheInput[] | LancheIngredienteUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutLancheInput | LancheIngredienteCreateOrConnectWithoutLancheInput[]
    createMany?: LancheIngredienteCreateManyLancheInputEnvelope
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
  }

  export type CompraLancheUncheckedCreateNestedManyWithoutLancheInput = {
    create?: XOR<CompraLancheCreateWithoutLancheInput, CompraLancheUncheckedCreateWithoutLancheInput> | CompraLancheCreateWithoutLancheInput[] | CompraLancheUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutLancheInput | CompraLancheCreateOrConnectWithoutLancheInput[]
    createMany?: CompraLancheCreateManyLancheInputEnvelope
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LancheIngredienteUpdateManyWithoutLancheNestedInput = {
    create?: XOR<LancheIngredienteCreateWithoutLancheInput, LancheIngredienteUncheckedCreateWithoutLancheInput> | LancheIngredienteCreateWithoutLancheInput[] | LancheIngredienteUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutLancheInput | LancheIngredienteCreateOrConnectWithoutLancheInput[]
    upsert?: LancheIngredienteUpsertWithWhereUniqueWithoutLancheInput | LancheIngredienteUpsertWithWhereUniqueWithoutLancheInput[]
    createMany?: LancheIngredienteCreateManyLancheInputEnvelope
    set?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    disconnect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    delete?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    update?: LancheIngredienteUpdateWithWhereUniqueWithoutLancheInput | LancheIngredienteUpdateWithWhereUniqueWithoutLancheInput[]
    updateMany?: LancheIngredienteUpdateManyWithWhereWithoutLancheInput | LancheIngredienteUpdateManyWithWhereWithoutLancheInput[]
    deleteMany?: LancheIngredienteScalarWhereInput | LancheIngredienteScalarWhereInput[]
  }

  export type CompraLancheUpdateManyWithoutLancheNestedInput = {
    create?: XOR<CompraLancheCreateWithoutLancheInput, CompraLancheUncheckedCreateWithoutLancheInput> | CompraLancheCreateWithoutLancheInput[] | CompraLancheUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutLancheInput | CompraLancheCreateOrConnectWithoutLancheInput[]
    upsert?: CompraLancheUpsertWithWhereUniqueWithoutLancheInput | CompraLancheUpsertWithWhereUniqueWithoutLancheInput[]
    createMany?: CompraLancheCreateManyLancheInputEnvelope
    set?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    disconnect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    delete?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    update?: CompraLancheUpdateWithWhereUniqueWithoutLancheInput | CompraLancheUpdateWithWhereUniqueWithoutLancheInput[]
    updateMany?: CompraLancheUpdateManyWithWhereWithoutLancheInput | CompraLancheUpdateManyWithWhereWithoutLancheInput[]
    deleteMany?: CompraLancheScalarWhereInput | CompraLancheScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LancheIngredienteUncheckedUpdateManyWithoutLancheNestedInput = {
    create?: XOR<LancheIngredienteCreateWithoutLancheInput, LancheIngredienteUncheckedCreateWithoutLancheInput> | LancheIngredienteCreateWithoutLancheInput[] | LancheIngredienteUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutLancheInput | LancheIngredienteCreateOrConnectWithoutLancheInput[]
    upsert?: LancheIngredienteUpsertWithWhereUniqueWithoutLancheInput | LancheIngredienteUpsertWithWhereUniqueWithoutLancheInput[]
    createMany?: LancheIngredienteCreateManyLancheInputEnvelope
    set?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    disconnect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    delete?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    update?: LancheIngredienteUpdateWithWhereUniqueWithoutLancheInput | LancheIngredienteUpdateWithWhereUniqueWithoutLancheInput[]
    updateMany?: LancheIngredienteUpdateManyWithWhereWithoutLancheInput | LancheIngredienteUpdateManyWithWhereWithoutLancheInput[]
    deleteMany?: LancheIngredienteScalarWhereInput | LancheIngredienteScalarWhereInput[]
  }

  export type CompraLancheUncheckedUpdateManyWithoutLancheNestedInput = {
    create?: XOR<CompraLancheCreateWithoutLancheInput, CompraLancheUncheckedCreateWithoutLancheInput> | CompraLancheCreateWithoutLancheInput[] | CompraLancheUncheckedCreateWithoutLancheInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutLancheInput | CompraLancheCreateOrConnectWithoutLancheInput[]
    upsert?: CompraLancheUpsertWithWhereUniqueWithoutLancheInput | CompraLancheUpsertWithWhereUniqueWithoutLancheInput[]
    createMany?: CompraLancheCreateManyLancheInputEnvelope
    set?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    disconnect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    delete?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    update?: CompraLancheUpdateWithWhereUniqueWithoutLancheInput | CompraLancheUpdateWithWhereUniqueWithoutLancheInput[]
    updateMany?: CompraLancheUpdateManyWithWhereWithoutLancheInput | CompraLancheUpdateManyWithWhereWithoutLancheInput[]
    deleteMany?: CompraLancheScalarWhereInput | CompraLancheScalarWhereInput[]
  }

  export type LancheIngredienteCreateNestedManyWithoutIngredienteInput = {
    create?: XOR<LancheIngredienteCreateWithoutIngredienteInput, LancheIngredienteUncheckedCreateWithoutIngredienteInput> | LancheIngredienteCreateWithoutIngredienteInput[] | LancheIngredienteUncheckedCreateWithoutIngredienteInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutIngredienteInput | LancheIngredienteCreateOrConnectWithoutIngredienteInput[]
    createMany?: LancheIngredienteCreateManyIngredienteInputEnvelope
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
  }

  export type LancheIngredienteUncheckedCreateNestedManyWithoutIngredienteInput = {
    create?: XOR<LancheIngredienteCreateWithoutIngredienteInput, LancheIngredienteUncheckedCreateWithoutIngredienteInput> | LancheIngredienteCreateWithoutIngredienteInput[] | LancheIngredienteUncheckedCreateWithoutIngredienteInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutIngredienteInput | LancheIngredienteCreateOrConnectWithoutIngredienteInput[]
    createMany?: LancheIngredienteCreateManyIngredienteInputEnvelope
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
  }

  export type LancheIngredienteUpdateManyWithoutIngredienteNestedInput = {
    create?: XOR<LancheIngredienteCreateWithoutIngredienteInput, LancheIngredienteUncheckedCreateWithoutIngredienteInput> | LancheIngredienteCreateWithoutIngredienteInput[] | LancheIngredienteUncheckedCreateWithoutIngredienteInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutIngredienteInput | LancheIngredienteCreateOrConnectWithoutIngredienteInput[]
    upsert?: LancheIngredienteUpsertWithWhereUniqueWithoutIngredienteInput | LancheIngredienteUpsertWithWhereUniqueWithoutIngredienteInput[]
    createMany?: LancheIngredienteCreateManyIngredienteInputEnvelope
    set?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    disconnect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    delete?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    update?: LancheIngredienteUpdateWithWhereUniqueWithoutIngredienteInput | LancheIngredienteUpdateWithWhereUniqueWithoutIngredienteInput[]
    updateMany?: LancheIngredienteUpdateManyWithWhereWithoutIngredienteInput | LancheIngredienteUpdateManyWithWhereWithoutIngredienteInput[]
    deleteMany?: LancheIngredienteScalarWhereInput | LancheIngredienteScalarWhereInput[]
  }

  export type LancheIngredienteUncheckedUpdateManyWithoutIngredienteNestedInput = {
    create?: XOR<LancheIngredienteCreateWithoutIngredienteInput, LancheIngredienteUncheckedCreateWithoutIngredienteInput> | LancheIngredienteCreateWithoutIngredienteInput[] | LancheIngredienteUncheckedCreateWithoutIngredienteInput[]
    connectOrCreate?: LancheIngredienteCreateOrConnectWithoutIngredienteInput | LancheIngredienteCreateOrConnectWithoutIngredienteInput[]
    upsert?: LancheIngredienteUpsertWithWhereUniqueWithoutIngredienteInput | LancheIngredienteUpsertWithWhereUniqueWithoutIngredienteInput[]
    createMany?: LancheIngredienteCreateManyIngredienteInputEnvelope
    set?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    disconnect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    delete?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    connect?: LancheIngredienteWhereUniqueInput | LancheIngredienteWhereUniqueInput[]
    update?: LancheIngredienteUpdateWithWhereUniqueWithoutIngredienteInput | LancheIngredienteUpdateWithWhereUniqueWithoutIngredienteInput[]
    updateMany?: LancheIngredienteUpdateManyWithWhereWithoutIngredienteInput | LancheIngredienteUpdateManyWithWhereWithoutIngredienteInput[]
    deleteMany?: LancheIngredienteScalarWhereInput | LancheIngredienteScalarWhereInput[]
  }

  export type LancheCreateNestedOneWithoutIngredientesInput = {
    create?: XOR<LancheCreateWithoutIngredientesInput, LancheUncheckedCreateWithoutIngredientesInput>
    connectOrCreate?: LancheCreateOrConnectWithoutIngredientesInput
    connect?: LancheWhereUniqueInput
  }

  export type IngredienteCreateNestedOneWithoutLanchesInput = {
    create?: XOR<IngredienteCreateWithoutLanchesInput, IngredienteUncheckedCreateWithoutLanchesInput>
    connectOrCreate?: IngredienteCreateOrConnectWithoutLanchesInput
    connect?: IngredienteWhereUniqueInput
  }

  export type LancheUpdateOneRequiredWithoutIngredientesNestedInput = {
    create?: XOR<LancheCreateWithoutIngredientesInput, LancheUncheckedCreateWithoutIngredientesInput>
    connectOrCreate?: LancheCreateOrConnectWithoutIngredientesInput
    upsert?: LancheUpsertWithoutIngredientesInput
    connect?: LancheWhereUniqueInput
    update?: XOR<XOR<LancheUpdateToOneWithWhereWithoutIngredientesInput, LancheUpdateWithoutIngredientesInput>, LancheUncheckedUpdateWithoutIngredientesInput>
  }

  export type IngredienteUpdateOneRequiredWithoutLanchesNestedInput = {
    create?: XOR<IngredienteCreateWithoutLanchesInput, IngredienteUncheckedCreateWithoutLanchesInput>
    connectOrCreate?: IngredienteCreateOrConnectWithoutLanchesInput
    upsert?: IngredienteUpsertWithoutLanchesInput
    connect?: IngredienteWhereUniqueInput
    update?: XOR<XOR<IngredienteUpdateToOneWithWhereWithoutLanchesInput, IngredienteUpdateWithoutLanchesInput>, IngredienteUncheckedUpdateWithoutLanchesInput>
  }

  export type CompraCreateNestedManyWithoutClienteInput = {
    create?: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput> | CompraCreateWithoutClienteInput[] | CompraUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutClienteInput | CompraCreateOrConnectWithoutClienteInput[]
    createMany?: CompraCreateManyClienteInputEnvelope
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
  }

  export type CompraUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput> | CompraCreateWithoutClienteInput[] | CompraUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutClienteInput | CompraCreateOrConnectWithoutClienteInput[]
    createMany?: CompraCreateManyClienteInputEnvelope
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CompraUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput> | CompraCreateWithoutClienteInput[] | CompraUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutClienteInput | CompraCreateOrConnectWithoutClienteInput[]
    upsert?: CompraUpsertWithWhereUniqueWithoutClienteInput | CompraUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CompraCreateManyClienteInputEnvelope
    set?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    disconnect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    delete?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    update?: CompraUpdateWithWhereUniqueWithoutClienteInput | CompraUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CompraUpdateManyWithWhereWithoutClienteInput | CompraUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CompraScalarWhereInput | CompraScalarWhereInput[]
  }

  export type CompraUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput> | CompraCreateWithoutClienteInput[] | CompraUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutClienteInput | CompraCreateOrConnectWithoutClienteInput[]
    upsert?: CompraUpsertWithWhereUniqueWithoutClienteInput | CompraUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CompraCreateManyClienteInputEnvelope
    set?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    disconnect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    delete?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    update?: CompraUpdateWithWhereUniqueWithoutClienteInput | CompraUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CompraUpdateManyWithWhereWithoutClienteInput | CompraUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CompraScalarWhereInput | CompraScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutComprasInput = {
    create?: XOR<ClienteCreateWithoutComprasInput, ClienteUncheckedCreateWithoutComprasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutComprasInput
    connect?: ClienteWhereUniqueInput
  }

  export type CompraLancheCreateNestedManyWithoutCompraInput = {
    create?: XOR<CompraLancheCreateWithoutCompraInput, CompraLancheUncheckedCreateWithoutCompraInput> | CompraLancheCreateWithoutCompraInput[] | CompraLancheUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutCompraInput | CompraLancheCreateOrConnectWithoutCompraInput[]
    createMany?: CompraLancheCreateManyCompraInputEnvelope
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
  }

  export type CompraLancheUncheckedCreateNestedManyWithoutCompraInput = {
    create?: XOR<CompraLancheCreateWithoutCompraInput, CompraLancheUncheckedCreateWithoutCompraInput> | CompraLancheCreateWithoutCompraInput[] | CompraLancheUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutCompraInput | CompraLancheCreateOrConnectWithoutCompraInput[]
    createMany?: CompraLancheCreateManyCompraInputEnvelope
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ClienteUpdateOneRequiredWithoutComprasNestedInput = {
    create?: XOR<ClienteCreateWithoutComprasInput, ClienteUncheckedCreateWithoutComprasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutComprasInput
    upsert?: ClienteUpsertWithoutComprasInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutComprasInput, ClienteUpdateWithoutComprasInput>, ClienteUncheckedUpdateWithoutComprasInput>
  }

  export type CompraLancheUpdateManyWithoutCompraNestedInput = {
    create?: XOR<CompraLancheCreateWithoutCompraInput, CompraLancheUncheckedCreateWithoutCompraInput> | CompraLancheCreateWithoutCompraInput[] | CompraLancheUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutCompraInput | CompraLancheCreateOrConnectWithoutCompraInput[]
    upsert?: CompraLancheUpsertWithWhereUniqueWithoutCompraInput | CompraLancheUpsertWithWhereUniqueWithoutCompraInput[]
    createMany?: CompraLancheCreateManyCompraInputEnvelope
    set?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    disconnect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    delete?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    update?: CompraLancheUpdateWithWhereUniqueWithoutCompraInput | CompraLancheUpdateWithWhereUniqueWithoutCompraInput[]
    updateMany?: CompraLancheUpdateManyWithWhereWithoutCompraInput | CompraLancheUpdateManyWithWhereWithoutCompraInput[]
    deleteMany?: CompraLancheScalarWhereInput | CompraLancheScalarWhereInput[]
  }

  export type CompraLancheUncheckedUpdateManyWithoutCompraNestedInput = {
    create?: XOR<CompraLancheCreateWithoutCompraInput, CompraLancheUncheckedCreateWithoutCompraInput> | CompraLancheCreateWithoutCompraInput[] | CompraLancheUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: CompraLancheCreateOrConnectWithoutCompraInput | CompraLancheCreateOrConnectWithoutCompraInput[]
    upsert?: CompraLancheUpsertWithWhereUniqueWithoutCompraInput | CompraLancheUpsertWithWhereUniqueWithoutCompraInput[]
    createMany?: CompraLancheCreateManyCompraInputEnvelope
    set?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    disconnect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    delete?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    connect?: CompraLancheWhereUniqueInput | CompraLancheWhereUniqueInput[]
    update?: CompraLancheUpdateWithWhereUniqueWithoutCompraInput | CompraLancheUpdateWithWhereUniqueWithoutCompraInput[]
    updateMany?: CompraLancheUpdateManyWithWhereWithoutCompraInput | CompraLancheUpdateManyWithWhereWithoutCompraInput[]
    deleteMany?: CompraLancheScalarWhereInput | CompraLancheScalarWhereInput[]
  }

  export type CompraCreateNestedOneWithoutLanchesInput = {
    create?: XOR<CompraCreateWithoutLanchesInput, CompraUncheckedCreateWithoutLanchesInput>
    connectOrCreate?: CompraCreateOrConnectWithoutLanchesInput
    connect?: CompraWhereUniqueInput
  }

  export type LancheCreateNestedOneWithoutComprasLanchesInput = {
    create?: XOR<LancheCreateWithoutComprasLanchesInput, LancheUncheckedCreateWithoutComprasLanchesInput>
    connectOrCreate?: LancheCreateOrConnectWithoutComprasLanchesInput
    connect?: LancheWhereUniqueInput
  }

  export type CompraUpdateOneRequiredWithoutLanchesNestedInput = {
    create?: XOR<CompraCreateWithoutLanchesInput, CompraUncheckedCreateWithoutLanchesInput>
    connectOrCreate?: CompraCreateOrConnectWithoutLanchesInput
    upsert?: CompraUpsertWithoutLanchesInput
    connect?: CompraWhereUniqueInput
    update?: XOR<XOR<CompraUpdateToOneWithWhereWithoutLanchesInput, CompraUpdateWithoutLanchesInput>, CompraUncheckedUpdateWithoutLanchesInput>
  }

  export type LancheUpdateOneRequiredWithoutComprasLanchesNestedInput = {
    create?: XOR<LancheCreateWithoutComprasLanchesInput, LancheUncheckedCreateWithoutComprasLanchesInput>
    connectOrCreate?: LancheCreateOrConnectWithoutComprasLanchesInput
    upsert?: LancheUpsertWithoutComprasLanchesInput
    connect?: LancheWhereUniqueInput
    update?: XOR<XOR<LancheUpdateToOneWithWhereWithoutComprasLanchesInput, LancheUpdateWithoutComprasLanchesInput>, LancheUncheckedUpdateWithoutComprasLanchesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LancheIngredienteCreateWithoutLancheInput = {
    ingrediente: IngredienteCreateNestedOneWithoutLanchesInput
  }

  export type LancheIngredienteUncheckedCreateWithoutLancheInput = {
    ingrediente_id: number
  }

  export type LancheIngredienteCreateOrConnectWithoutLancheInput = {
    where: LancheIngredienteWhereUniqueInput
    create: XOR<LancheIngredienteCreateWithoutLancheInput, LancheIngredienteUncheckedCreateWithoutLancheInput>
  }

  export type LancheIngredienteCreateManyLancheInputEnvelope = {
    data: LancheIngredienteCreateManyLancheInput | LancheIngredienteCreateManyLancheInput[]
    skipDuplicates?: boolean
  }

  export type CompraLancheCreateWithoutLancheInput = {
    quantidade: number
    compra: CompraCreateNestedOneWithoutLanchesInput
  }

  export type CompraLancheUncheckedCreateWithoutLancheInput = {
    quantidade: number
    compraId: number
  }

  export type CompraLancheCreateOrConnectWithoutLancheInput = {
    where: CompraLancheWhereUniqueInput
    create: XOR<CompraLancheCreateWithoutLancheInput, CompraLancheUncheckedCreateWithoutLancheInput>
  }

  export type CompraLancheCreateManyLancheInputEnvelope = {
    data: CompraLancheCreateManyLancheInput | CompraLancheCreateManyLancheInput[]
    skipDuplicates?: boolean
  }

  export type LancheIngredienteUpsertWithWhereUniqueWithoutLancheInput = {
    where: LancheIngredienteWhereUniqueInput
    update: XOR<LancheIngredienteUpdateWithoutLancheInput, LancheIngredienteUncheckedUpdateWithoutLancheInput>
    create: XOR<LancheIngredienteCreateWithoutLancheInput, LancheIngredienteUncheckedCreateWithoutLancheInput>
  }

  export type LancheIngredienteUpdateWithWhereUniqueWithoutLancheInput = {
    where: LancheIngredienteWhereUniqueInput
    data: XOR<LancheIngredienteUpdateWithoutLancheInput, LancheIngredienteUncheckedUpdateWithoutLancheInput>
  }

  export type LancheIngredienteUpdateManyWithWhereWithoutLancheInput = {
    where: LancheIngredienteScalarWhereInput
    data: XOR<LancheIngredienteUpdateManyMutationInput, LancheIngredienteUncheckedUpdateManyWithoutLancheInput>
  }

  export type LancheIngredienteScalarWhereInput = {
    AND?: LancheIngredienteScalarWhereInput | LancheIngredienteScalarWhereInput[]
    OR?: LancheIngredienteScalarWhereInput[]
    NOT?: LancheIngredienteScalarWhereInput | LancheIngredienteScalarWhereInput[]
    lanche_id?: IntFilter<"LancheIngrediente"> | number
    ingrediente_id?: IntFilter<"LancheIngrediente"> | number
  }

  export type CompraLancheUpsertWithWhereUniqueWithoutLancheInput = {
    where: CompraLancheWhereUniqueInput
    update: XOR<CompraLancheUpdateWithoutLancheInput, CompraLancheUncheckedUpdateWithoutLancheInput>
    create: XOR<CompraLancheCreateWithoutLancheInput, CompraLancheUncheckedCreateWithoutLancheInput>
  }

  export type CompraLancheUpdateWithWhereUniqueWithoutLancheInput = {
    where: CompraLancheWhereUniqueInput
    data: XOR<CompraLancheUpdateWithoutLancheInput, CompraLancheUncheckedUpdateWithoutLancheInput>
  }

  export type CompraLancheUpdateManyWithWhereWithoutLancheInput = {
    where: CompraLancheScalarWhereInput
    data: XOR<CompraLancheUpdateManyMutationInput, CompraLancheUncheckedUpdateManyWithoutLancheInput>
  }

  export type CompraLancheScalarWhereInput = {
    AND?: CompraLancheScalarWhereInput | CompraLancheScalarWhereInput[]
    OR?: CompraLancheScalarWhereInput[]
    NOT?: CompraLancheScalarWhereInput | CompraLancheScalarWhereInput[]
    quantidade?: IntFilter<"CompraLanche"> | number
    compraId?: IntFilter<"CompraLanche"> | number
    lancheId?: IntFilter<"CompraLanche"> | number
  }

  export type LancheIngredienteCreateWithoutIngredienteInput = {
    lanche: LancheCreateNestedOneWithoutIngredientesInput
  }

  export type LancheIngredienteUncheckedCreateWithoutIngredienteInput = {
    lanche_id: number
  }

  export type LancheIngredienteCreateOrConnectWithoutIngredienteInput = {
    where: LancheIngredienteWhereUniqueInput
    create: XOR<LancheIngredienteCreateWithoutIngredienteInput, LancheIngredienteUncheckedCreateWithoutIngredienteInput>
  }

  export type LancheIngredienteCreateManyIngredienteInputEnvelope = {
    data: LancheIngredienteCreateManyIngredienteInput | LancheIngredienteCreateManyIngredienteInput[]
    skipDuplicates?: boolean
  }

  export type LancheIngredienteUpsertWithWhereUniqueWithoutIngredienteInput = {
    where: LancheIngredienteWhereUniqueInput
    update: XOR<LancheIngredienteUpdateWithoutIngredienteInput, LancheIngredienteUncheckedUpdateWithoutIngredienteInput>
    create: XOR<LancheIngredienteCreateWithoutIngredienteInput, LancheIngredienteUncheckedCreateWithoutIngredienteInput>
  }

  export type LancheIngredienteUpdateWithWhereUniqueWithoutIngredienteInput = {
    where: LancheIngredienteWhereUniqueInput
    data: XOR<LancheIngredienteUpdateWithoutIngredienteInput, LancheIngredienteUncheckedUpdateWithoutIngredienteInput>
  }

  export type LancheIngredienteUpdateManyWithWhereWithoutIngredienteInput = {
    where: LancheIngredienteScalarWhereInput
    data: XOR<LancheIngredienteUpdateManyMutationInput, LancheIngredienteUncheckedUpdateManyWithoutIngredienteInput>
  }

  export type LancheCreateWithoutIngredientesInput = {
    name: string
    description: string
    price: number
    image: string
    comprasLanches?: CompraLancheCreateNestedManyWithoutLancheInput
  }

  export type LancheUncheckedCreateWithoutIngredientesInput = {
    id?: number
    name: string
    description: string
    price: number
    image: string
    comprasLanches?: CompraLancheUncheckedCreateNestedManyWithoutLancheInput
  }

  export type LancheCreateOrConnectWithoutIngredientesInput = {
    where: LancheWhereUniqueInput
    create: XOR<LancheCreateWithoutIngredientesInput, LancheUncheckedCreateWithoutIngredientesInput>
  }

  export type IngredienteCreateWithoutLanchesInput = {
    name: string
  }

  export type IngredienteUncheckedCreateWithoutLanchesInput = {
    id?: number
    name: string
  }

  export type IngredienteCreateOrConnectWithoutLanchesInput = {
    where: IngredienteWhereUniqueInput
    create: XOR<IngredienteCreateWithoutLanchesInput, IngredienteUncheckedCreateWithoutLanchesInput>
  }

  export type LancheUpsertWithoutIngredientesInput = {
    update: XOR<LancheUpdateWithoutIngredientesInput, LancheUncheckedUpdateWithoutIngredientesInput>
    create: XOR<LancheCreateWithoutIngredientesInput, LancheUncheckedCreateWithoutIngredientesInput>
    where?: LancheWhereInput
  }

  export type LancheUpdateToOneWithWhereWithoutIngredientesInput = {
    where?: LancheWhereInput
    data: XOR<LancheUpdateWithoutIngredientesInput, LancheUncheckedUpdateWithoutIngredientesInput>
  }

  export type LancheUpdateWithoutIngredientesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    comprasLanches?: CompraLancheUpdateManyWithoutLancheNestedInput
  }

  export type LancheUncheckedUpdateWithoutIngredientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    comprasLanches?: CompraLancheUncheckedUpdateManyWithoutLancheNestedInput
  }

  export type IngredienteUpsertWithoutLanchesInput = {
    update: XOR<IngredienteUpdateWithoutLanchesInput, IngredienteUncheckedUpdateWithoutLanchesInput>
    create: XOR<IngredienteCreateWithoutLanchesInput, IngredienteUncheckedCreateWithoutLanchesInput>
    where?: IngredienteWhereInput
  }

  export type IngredienteUpdateToOneWithWhereWithoutLanchesInput = {
    where?: IngredienteWhereInput
    data: XOR<IngredienteUpdateWithoutLanchesInput, IngredienteUncheckedUpdateWithoutLanchesInput>
  }

  export type IngredienteUpdateWithoutLanchesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IngredienteUncheckedUpdateWithoutLanchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CompraCreateWithoutClienteInput = {
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
    lanches?: CompraLancheCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateWithoutClienteInput = {
    id?: number
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
    lanches?: CompraLancheUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraCreateOrConnectWithoutClienteInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput>
  }

  export type CompraCreateManyClienteInputEnvelope = {
    data: CompraCreateManyClienteInput | CompraCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type CompraUpsertWithWhereUniqueWithoutClienteInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutClienteInput, CompraUncheckedUpdateWithoutClienteInput>
    create: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutClienteInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutClienteInput, CompraUncheckedUpdateWithoutClienteInput>
  }

  export type CompraUpdateManyWithWhereWithoutClienteInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutClienteInput>
  }

  export type CompraScalarWhereInput = {
    AND?: CompraScalarWhereInput | CompraScalarWhereInput[]
    OR?: CompraScalarWhereInput[]
    NOT?: CompraScalarWhereInput | CompraScalarWhereInput[]
    id?: IntFilter<"Compra"> | number
    clienteId?: IntFilter<"Compra"> | number
    total?: FloatFilter<"Compra"> | number
    observacao?: StringNullableFilter<"Compra"> | string | null
    createdAt?: DateTimeFilter<"Compra"> | Date | string
    address?: StringFilter<"Compra"> | string
  }

  export type ClienteCreateWithoutComprasInput = {
    name: string
    address: string
    phone: string
    email: string
    password: string
    image?: string | null
  }

  export type ClienteUncheckedCreateWithoutComprasInput = {
    id?: number
    name: string
    address: string
    phone: string
    email: string
    password: string
    image?: string | null
  }

  export type ClienteCreateOrConnectWithoutComprasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutComprasInput, ClienteUncheckedCreateWithoutComprasInput>
  }

  export type CompraLancheCreateWithoutCompraInput = {
    quantidade: number
    lanche: LancheCreateNestedOneWithoutComprasLanchesInput
  }

  export type CompraLancheUncheckedCreateWithoutCompraInput = {
    quantidade: number
    lancheId: number
  }

  export type CompraLancheCreateOrConnectWithoutCompraInput = {
    where: CompraLancheWhereUniqueInput
    create: XOR<CompraLancheCreateWithoutCompraInput, CompraLancheUncheckedCreateWithoutCompraInput>
  }

  export type CompraLancheCreateManyCompraInputEnvelope = {
    data: CompraLancheCreateManyCompraInput | CompraLancheCreateManyCompraInput[]
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutComprasInput = {
    update: XOR<ClienteUpdateWithoutComprasInput, ClienteUncheckedUpdateWithoutComprasInput>
    create: XOR<ClienteCreateWithoutComprasInput, ClienteUncheckedCreateWithoutComprasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutComprasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutComprasInput, ClienteUncheckedUpdateWithoutComprasInput>
  }

  export type ClienteUpdateWithoutComprasInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClienteUncheckedUpdateWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompraLancheUpsertWithWhereUniqueWithoutCompraInput = {
    where: CompraLancheWhereUniqueInput
    update: XOR<CompraLancheUpdateWithoutCompraInput, CompraLancheUncheckedUpdateWithoutCompraInput>
    create: XOR<CompraLancheCreateWithoutCompraInput, CompraLancheUncheckedCreateWithoutCompraInput>
  }

  export type CompraLancheUpdateWithWhereUniqueWithoutCompraInput = {
    where: CompraLancheWhereUniqueInput
    data: XOR<CompraLancheUpdateWithoutCompraInput, CompraLancheUncheckedUpdateWithoutCompraInput>
  }

  export type CompraLancheUpdateManyWithWhereWithoutCompraInput = {
    where: CompraLancheScalarWhereInput
    data: XOR<CompraLancheUpdateManyMutationInput, CompraLancheUncheckedUpdateManyWithoutCompraInput>
  }

  export type CompraCreateWithoutLanchesInput = {
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
    cliente: ClienteCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateWithoutLanchesInput = {
    id?: number
    clienteId: number
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
  }

  export type CompraCreateOrConnectWithoutLanchesInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutLanchesInput, CompraUncheckedCreateWithoutLanchesInput>
  }

  export type LancheCreateWithoutComprasLanchesInput = {
    name: string
    description: string
    price: number
    image: string
    ingredientes?: LancheIngredienteCreateNestedManyWithoutLancheInput
  }

  export type LancheUncheckedCreateWithoutComprasLanchesInput = {
    id?: number
    name: string
    description: string
    price: number
    image: string
    ingredientes?: LancheIngredienteUncheckedCreateNestedManyWithoutLancheInput
  }

  export type LancheCreateOrConnectWithoutComprasLanchesInput = {
    where: LancheWhereUniqueInput
    create: XOR<LancheCreateWithoutComprasLanchesInput, LancheUncheckedCreateWithoutComprasLanchesInput>
  }

  export type CompraUpsertWithoutLanchesInput = {
    update: XOR<CompraUpdateWithoutLanchesInput, CompraUncheckedUpdateWithoutLanchesInput>
    create: XOR<CompraCreateWithoutLanchesInput, CompraUncheckedCreateWithoutLanchesInput>
    where?: CompraWhereInput
  }

  export type CompraUpdateToOneWithWhereWithoutLanchesInput = {
    where?: CompraWhereInput
    data: XOR<CompraUpdateWithoutLanchesInput, CompraUncheckedUpdateWithoutLanchesInput>
  }

  export type CompraUpdateWithoutLanchesInput = {
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateWithoutLanchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type LancheUpsertWithoutComprasLanchesInput = {
    update: XOR<LancheUpdateWithoutComprasLanchesInput, LancheUncheckedUpdateWithoutComprasLanchesInput>
    create: XOR<LancheCreateWithoutComprasLanchesInput, LancheUncheckedCreateWithoutComprasLanchesInput>
    where?: LancheWhereInput
  }

  export type LancheUpdateToOneWithWhereWithoutComprasLanchesInput = {
    where?: LancheWhereInput
    data: XOR<LancheUpdateWithoutComprasLanchesInput, LancheUncheckedUpdateWithoutComprasLanchesInput>
  }

  export type LancheUpdateWithoutComprasLanchesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    ingredientes?: LancheIngredienteUpdateManyWithoutLancheNestedInput
  }

  export type LancheUncheckedUpdateWithoutComprasLanchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    ingredientes?: LancheIngredienteUncheckedUpdateManyWithoutLancheNestedInput
  }

  export type LancheIngredienteCreateManyLancheInput = {
    ingrediente_id: number
  }

  export type CompraLancheCreateManyLancheInput = {
    quantidade: number
    compraId: number
  }

  export type LancheIngredienteUpdateWithoutLancheInput = {
    ingrediente?: IngredienteUpdateOneRequiredWithoutLanchesNestedInput
  }

  export type LancheIngredienteUncheckedUpdateWithoutLancheInput = {
    ingrediente_id?: IntFieldUpdateOperationsInput | number
  }

  export type LancheIngredienteUncheckedUpdateManyWithoutLancheInput = {
    ingrediente_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompraLancheUpdateWithoutLancheInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    compra?: CompraUpdateOneRequiredWithoutLanchesNestedInput
  }

  export type CompraLancheUncheckedUpdateWithoutLancheInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    compraId?: IntFieldUpdateOperationsInput | number
  }

  export type CompraLancheUncheckedUpdateManyWithoutLancheInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    compraId?: IntFieldUpdateOperationsInput | number
  }

  export type LancheIngredienteCreateManyIngredienteInput = {
    lanche_id: number
  }

  export type LancheIngredienteUpdateWithoutIngredienteInput = {
    lanche?: LancheUpdateOneRequiredWithoutIngredientesNestedInput
  }

  export type LancheIngredienteUncheckedUpdateWithoutIngredienteInput = {
    lanche_id?: IntFieldUpdateOperationsInput | number
  }

  export type LancheIngredienteUncheckedUpdateManyWithoutIngredienteInput = {
    lanche_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompraCreateManyClienteInput = {
    id?: number
    total: number
    observacao?: string | null
    createdAt?: Date | string
    address: string
  }

  export type CompraUpdateWithoutClienteInput = {
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    lanches?: CompraLancheUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    lanches?: CompraLancheUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type CompraLancheCreateManyCompraInput = {
    quantidade: number
    lancheId: number
  }

  export type CompraLancheUpdateWithoutCompraInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    lanche?: LancheUpdateOneRequiredWithoutComprasLanchesNestedInput
  }

  export type CompraLancheUncheckedUpdateWithoutCompraInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    lancheId?: IntFieldUpdateOperationsInput | number
  }

  export type CompraLancheUncheckedUpdateManyWithoutCompraInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    lancheId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}